//------------------------------------------------------------------------------
// ScribblerSim.cs
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------
using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Security.Permissions;
using scribblersim = IPRE.ScribblerSim;
using xml = System.Xml;

#region Simulation namespaces
using Microsoft.Robotics.Simulation;
using Microsoft.Robotics.Simulation.Engine;
using engineproxy = Microsoft.Robotics.Simulation.Engine.Proxy;
using Microsoft.Robotics.Simulation.Physics;

using drive = Microsoft.Robotics.Services.Simulation.Drive.Proxy;
//using lrf = Microsoft.Robotics.Services.Simulation.Sensors.LaserRangeFinder.Proxy;
//using bumper = Microsoft.Robotics.Services.Simulation.Sensors.Bumper.Proxy;
//using simwebcam = Microsoft.Robotics.Services.Simulation.Sensors.SimulatedWebcam.Proxy;

using Microsoft.Robotics.PhysicalModel;
using System.ComponentModel;
#endregion

namespace IPRE.ScribblerSim
{
    
    [DisplayName("ScribblerSim")]
    [Description("The ScribblerSim Service")]
    [Contract(Contract.Identifier)]
    [PermissionSet(SecurityAction.PermitOnly, Name="Execution")]
    public class ScribblerSimService : DsspServiceBase
    {
        private ScribblerSimState _state = new ScribblerSimState();

        // Port used to communicate with simulation engine service directly, no cloning
        SimulationEnginePort _simEnginePort;

        // partner attribute will cause simulation engine service to start
        [Partner("Engine",
            Contract = engineproxy.Contract.Identifier,
            CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
        private engineproxy.SimulationEnginePort _engineServicePort =
            new engineproxy.SimulationEnginePort();

        [ServicePort("/scribblersim", AllowMultipleInstances=false)]
        private ScribblerSimOperations _mainPort = new ScribblerSimOperations();
        /// <summary>
        /// Default Service Constructor
        /// </summary>
        
        public ScribblerSimService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
			CreateSuccess();
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {

            // Listen on the main port for requests and call the appropriate handler.
            ActivateDsspOperationHandlers();

            // Publish the service to the local service Directory
            DirectoryInsert();

			// display HTTP service Uri
			LogInfo(LogGroups.Console, "Service uri: ");

            // Cache reference to simulation/rendering
            _simEnginePort = SimulationEngine.GlobalInstancePort;

            // Add objects (entities) in our simulated world
            PopulateWorld();
        }

        private void PopulateWorld()
        {
            AddSky();
            AddGround();
            //AddCameras();
            //AddTable(new Vector3(1, 0.5f, -2));
            AddScribblerRobot(new Vector3(0, 0, 0));
        }

        void AddScribblerRobot(Vector3 position)
        {
            ScribblerRobot robotBaseEntity = CreateScribblerMotorBase(ref position);

            // Create bumper array entity and start simulated bumper service
            //BumperArrayEntity bumperArray = CreateLegoNxtBumper();

            // insert as child of motor base
            //robotBaseEntity.InsertEntity(bumperArray);

            // Finaly insert the motor base and its two children 
            // to the simulation
            SimulationEngine.GlobalInstancePort.Insert(robotBaseEntity);
        }

        private ScribblerRobot CreateScribblerMotorBase(ref Vector3 position)
        {
            // use supplied entity that creates a motor base 
            // with 2 active wheels and one caster
            ScribblerRobot robotBaseEntity = new ScribblerRobot(position);

            // specify mesh. 
            robotBaseEntity.State.Assets.Mesh = "Scribbler.bos";

            // the name below must match manifest
            robotBaseEntity.State.Name = "/ScribblerRobot";

            // Start simulated arcos motor service
            CreateService(
                drive.Contract.Identifier,
                Microsoft.Robotics.Simulation.Partners.CreateEntityPartner(
                    "http://localhost" + robotBaseEntity.State.Name)
            );
            return robotBaseEntity;
        }

        #region Environment Entities

        void AddSky()
        {
            // Add a sky using a static texture. We will use the sky texture
            // to do per pixel lighting on each simulation visual entity
            SkyEntity sky = new SkyEntity("sky.dds", "sky_diff.dds");
            SimulationEngine.GlobalInstancePort.Insert(sky);
        }

        void AddGround()
        {
            HeightFieldShapeProperties hf = new HeightFieldShapeProperties("height field",
                64, // number of rows 
                100, // distance in meters, between rows
                64, // number of columns
                100, // distance in meters, between columns
                1, // scale factor to multiple height values 
                -1000); // vertical extent of the height field. Should be set to large negative values

            // create array with height samples
            hf.HeightSamples = new HeightFieldSample[hf.RowCount * hf.ColumnCount];
            for (int i = 0; i < hf.RowCount * hf.ColumnCount; i++)
            {
                hf.HeightSamples[i] = new HeightFieldSample();
                hf.HeightSamples[i].Height = (short)(Math.Sin(i * 0.01));
            }

            // create a material for the entire field. We could also specify material per sample.
            hf.Material = new MaterialProperties("ground", 0.8f, 0.5f, 0.8f);

            // insert ground entity in simulation and specify a texture
            SimulationEngine.GlobalInstancePort.Insert(new HeightFieldEntity(hf, "03RamieSc.dds"));
        }


        #endregion
    }
}
