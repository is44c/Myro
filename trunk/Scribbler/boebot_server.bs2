' {$STAMP BS2}
' {$PBASIC 2.5}
' Azam Thatte, Georgia Institute of Technology, 04/03/2008
' Doug Blank, Byrn Mawr College, 2008
'--------------------------------------------------------------------
'''''''''''''''''''''''''''''''''''''''
' Default Robot Name
'   Gets set on reprogram
' Default Data - application uses
'   Gets set on reprogram
'''''''''''''''''''''''''''''''''''''''
nameData DATA          "Boebot          "
'                       1234567890123456
ipreData DATA          127,127,127,127,0,0,0,0
'
passData DATA          "Boebot          "

echoData DATA          0
sendData DATA          0
quietData DATA         0

SOFT_RESET         CON 33  ' Format: 33 0 0 0 0 0 0 0 0, Notes: Performs a software reset of robot.  (turns name broadcast back on)
GET_ALL            CON 65  ' Response: leftIR rightIR LeftLightHighyte LeftLightLowByte CenterLightHighByte CenterLightLowByte RightLightHighByte RightLightLowByte LineLeft LineRight Stall 65
GET_ALL_BINARY     CON 66  ' Response: BinaryData 66, Notes: where the individual bits of BinaryData are: 0x000 IRLeft IRRight Stall LineLeft LineRight
GET_LIGHT_LEFT     CON 67  ' Response: HighByte LowByte 67
GET_LIGHT_CENTER   CON 68  ' Response: HighByte LowByte 68
GET_LIGHT_RIGHT    CON 69  ' Response: HighByte LowByte 69
GET_LIGHT_ALL      CON 70  ' Response: LeftHighyte LeftLowByte CenterHighByte CenterLowByte RightHighByte RightLowByte 70
GET_IR_LEFT        CON 71  ' Response: leftIR 71, Notes: IR is 1 when there is no obstacle to the left of robot
GET_IR_RIGHT       CON 72  ' Response: rightIR 72, Notes: IR is 1 when there is no obstacle to the left of robot
GET_IR_ALL         CON 73  ' Response: LeftIR RightIR 73, Notes: IR is 1 when there is no obstacle to the left of robot
GET_LINE_LEFT      CON 74  ' Response: lineLeft 74
GET_LINE_RIGHT     CON 75  ' Response: lineRight 75
GET_LINE_ALL       CON 76  ' Response: LineLeft LineRight 76
GET_STATE          CON 77  ' Response: inPins outPins 77, Notes: inPins is the state of all the input pins (0-7), and outPins is the state of all the output pins (8-15) as defined in the I/O Pin Declarations.
GET_NAME1          CON 78  ' Response: char1 char2 char3 char4 char5 char6 char7 char8 78
GET_NAME2          CON 64  ' Response: char9 char10 char11 char12 char13 char14 char15 char16 87
GET_STALL          CON 79  ' Response: stall 79
GET_INFO           CON 80  ' Response: "information on version robot, etc" 10 80
GET_DATA           CON 81  ' Response: data from flash memory 81

GET_PASS1          CON 50  ' Respone: 16 bytes from flash memory
GET_PASS2          CON 51  ' Respone: 16 bytes from flash memory


SET_SINGLE_DATA    CON 96  ' Sets a single byte of data in flash memory'
SET_DATA           CON 97  ' Sets 8 bytes of data in flash memory
SET_ECHO_MODE      CON 98  ' Set the echo mode on or off; if off, no echo is made after command
SET_LED_LEFT_ON    CON 99
SET_LED_LEFT_OFF   CON 100
SET_LED_CENTER_ON  CON 101
SET_LED_CENTER_OFF CON 102
SET_LED_RIGHT_ON   CON 103
SET_LED_RIGHT_OFF  CON 104
SET_LED_ALL_ON     CON 105
SET_LED_ALL_OFF    CON 106
SET_LED_ALL        CON 107 ' Format: 107 LeftLEDstate CenterLEDstate RightLEDstate 0 0 0 0 0
SET_MOTORS_OFF     CON 108 ' Format: 108 0 0 0 0 0 0 0 0
SET_MOTORS         CON 109 ' Format: 109 rightmotor leftmotor 0 0 0 0 0 0, Notes: 0 = full speed backwards, 100 = stop, 200 = full speed forward
SET_NAME1          CON 110 ' Format: 110 char1 char2 char3 char4 char5 char6 char7 char8
SET_NAME2          CON 119 ' Format: 119 char9 char10 char11 char12 char13 char14 char15 char16
SET_LOUD           CON 111
SET_QUIET          CON 112
SET_SPEAKER        CON 113 ' Format: 113 DurationHighByte DurationLowByte FreqHighByte FreqLowByte
SET_SPEAKER_2      CON 114 ' Format: 114 DurationHighByte DurationLowByte Freq1HighByte Freq1LowByte Freq2HighByte Freq2LowByte

SET_PASS1          CON 55  ' Format: 55 PASS1 PASS2 ... PASS8
SET_PASS2          CON 56  ' Format: 56 PASS9 PASS2 ... PASS16

TIMEOUT            CON 1000 ' in ms.  How often to broadcast name (if sendName) or flash lights
PACKET_LENGTH      CON 9
DATA_LENGTH        CON 8

'BAUD              CON 84  '9600 baud
BAUD               CON 6  '38400 baud

''''''''''''''''''''''''''''''''''''''''''
' I/O Pin Declarations
'    Constant for the Scribbler robot
''''''''''''''''''''''''''''''''''''''''''
LightRightPin    PIN 0
LightCenterPin   PIN 1
LightLeftPin     PIN 2
LineEnablePin    PIN 3
LineRightPin     PIN 5
LineLeftPin      PIN 5
ObsRxPin         PIN 6
StallPin         PIN 7
LedRightPin      PIN 8
LedCenterPin     PIN 9
LedLeftPin       PIN 10
SpeakerPin       PIN 11
MotorRightPin    PIN 12
MotorLeftPin     PIN 13
'MotorGrip        PIN 14
ObsTxRightPin    PIN 15
ObsTxLeftPin     PIN 15
SerialPin        CON 16

'''''''''''''''''''''''''''''
' Global Variables
'''''''''''''''''''''''''''''
inCmd    VAR Byte(PACKET_LENGTH)
quiet    VAR Bit
sendName VAR Bit
echoMode VAR Bit
i_counter VAR Word
rev_counter VAR Word
right_pulse VAR Word
left_pulse VAR Word
grip_counter VAR Word
rot0 VAR Word
rot1 VAR Word
rot2 VAR Word
'''''''''''''''''''''''''''''
' Temp Variables
'''''''''''''''''''''''''''''
var1    VAR Word
var2    VAR Word
var3    VAR Word
temp    VAR Byte
temp2   VAR Byte


rot0 = 750
rot1 = 650
rot2 = 850
'''''''''''''''''''''''''''''''''''
' Software reset start location
'''''''''''''''''''''''''''''''''''
SoftwareReset:

''''''''''''''''''''''''''
' I/O Initialization
''''''''''''''''''''''''''
HIGH LightRightPin
HIGH LightCenterPin
HIGH LightLeftPin
HIGH LineEnablePin
LOW LedRightPin
LOW LedCenterPin
LOW LedLeftPin
LOW SpeakerPin
LOW MotorRightPin
LOW MotorLeftPin
LOW ObsTxRightPin
LOW ObsTxLeftPin

''''''''''''''''''''''''''''''
' Variable Initialization
''''''''''''''''''''''''''''''
inCmd(PACKET_LENGTH-1) = 0
READ echoData, inCmd(0)
echoMode = inCmd(0) & %00000001
READ sendData, inCmd(0)
sendName = inCmd(0) & %00000001
READ quietData, inCmd(0)
quiet = inCmd(0) & %00000001


INIT:
  ' Used to flash the middle LED with short timeout:
  IF (LedCenterPin = 1) THEN LedCenterPin = 0 ELSE LedCenterPin = 1

  ' Send characteristic string and name
  IF (sendName = 1) THEN
    FOR temp = 0 TO (PACKET_LENGTH - 1)
      READ temp + nameData, inCmd(temp)
    NEXT
    SEROUT SerialPin, BAUD, ["IPRE", STR inCmd\PACKET_LENGTH, 0]
  ENDIF

BEGIN:
  SERIN SerialPin, BAUD, TIMEOUT, INIT, [STR inCmd\PACKET_LENGTH]
  ' SERIN serial,baudrate,[DEC pulse_width]  ' for MATLAB

  LOOKDOWN inCmd(0), = [GET_STATE, GET_LINE_RIGHT, GET_LINE_LEFT, GET_IR_LEFT, GET_IR_RIGHT, GET_STALL, GET_NAME1, GET_NAME2, GET_PASS1, GET_PASS2,  SET_MOTORS_OFF, SET_MOTORS, SET_SPEAKER, SET_SPEAKER_2, SET_LED_LEFT_ON, SET_LED_LEFT_OFF, SET_LED_CENTER_ON, SET_LED_CENTER_OFF, SET_LED_RIGHT_ON, SET_LED_RIGHT_OFF, SET_NAME1, SET_NAME2, SET_PASS1, SET_PASS2, SET_LED_ALL_ON, SET_LED_ALL_OFF, GET_IR_ALL, GET_LINE_ALL, GET_ALL, SET_LOUD, SET_QUIET, GET_ALL_BINARY, SOFT_RESET,    SET_LED_ALL, GET_INFO, GET_DATA, SET_DATA, SET_SINGLE_DATA, SET_ECHO_MODE], temp
  BRANCH temp,         [GetState,  GetLineRight,   GetLineLeft,  GetObsLeft,  GetObsRight,  GetStall,  GetName1,  GetName2, GetPass1, GetPass2,  MotorsOff,      Motors,     SetSpeaker,  SetSpeaker2,   OnLeftLED,       OffLeftLED,       OnCenterLED,       OffCenterLED,       OnRightLED,       OffRightLED,       SetName1,  SetName2, SetPass1, SetPass2,  OnAllLED,       OffAllLED,     GetIRAll,   GetLineAll,   GetAll,  SetLoud,  SetQuiet,  GetAllBinary,   SoftwareReset, SetLedAll,   GetInfo,  GetData,  SetData, SetSingleData, SetEchoMode]
TOP:
  IF (echoMode = 1)     THEN SEROUT SerialPin, BAUD, [inCmd(0)]
  IF (LedCenterPin = 1) THEN LedCenterPin = 0 ELSE LedCenterPin = 1
  sendName = 0
GOTO BEGIN


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Subroutines
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

SetQuiet:
   quiet = 1
   WRITE quietData, 1
   GOTO GetAll

SetLoud:
   quiet = 0
   WRITE quietData, 0
   GOTO GetAll

GetState:
     SEROUT SerialPin, BAUD, [INL, OUTH]
     GOTO TOP

GetLineRight:
     SEROUT SerialPin, BAUD, [LineRightPin]
     GOTO TOP

GetLineLeft:
     SEROUT SerialPin, BAUD, [LineLeftPin]
     GOTO TOP

GetLineAll:
     SEROUT SerialPin, BAUD, [LineLeftPin, LineRightPin]
     GOTO TOP


GetObsRight:
     FREQOUT ObsTxRightPin, 1, 40500
     temp = ObsRxPin
     LOW ObsTxRightPin
     SEROUT SerialPin, BAUD, [temp]
     GOTO TOP

GetObsLeft:
     FREQOUT ObsTxLeftPin, 1, 40500
     temp = ObsRxPin
     LOW ObsTxLeftPin
     SEROUT SerialPin, BAUD, [temp]
     GOTO TOP

GetIRAll:
     FREQOUT ObsTxLeftPin, 1, 40500
     temp = ObsRxPin
     LOW ObsTxLeftPin

     FREQOUT ObsTxRightPin, 1, 40500
     temp2 = ObsRxPin
     LOW ObsTxRightPin

     SEROUT SerialPin, BAUD, [temp, temp2]
     GOTO TOP

GetAll:
     'IR
     FREQOUT ObsTxLeftPin, 1, 40500
     temp = ObsRxPin
     LOW ObsTxLeftPin

     FREQOUT ObsTxRightPin, 1, 40500
     temp2 = ObsRxPin
     LOW ObsTxRightPin

     'Light
     HIGH LightLeftPin
     HIGH LightCenterPin
     HIGH LightRightPin
     PAUSE 3
     RCTIME LightLeftPin, 1, var3
     RCTIME LightCenterPin, 1, var2
     RCTIME LightRightPin, 1, var1

     'Line
     SEROUT SerialPin, BAUD, [temp, temp2, var3.HIGHBYTE, var3.LOWBYTE,
                           var2.HIGHBYTE, var2.LOWBYTE, var1.HIGHBYTE, var1.LOWBYTE,
                           LineLeftPin, LineRightPin, StallPin]
     GOTO TOP


'0x000 IRLeft IRRight Stall LineLeft LineRight
GetAllBinary:

  temp = 0

  FREQOUT ObsTxLeftPin, 1, 40500
  temp2 = ObsRxPin
  LOW ObsTxLeftPin

  temp = (temp2 & 1) << 4

  FREQOUT ObsTxRightPin, 1, 40500
  temp2 = ObsRxPin
  LOW ObsTxRightPin

  temp = temp | ((temp2 & 1) << 3)

  temp = temp | (StallPin << 2)

  temp = temp | (LineLeftPin << 1)

  temp = temp | LineRightPin

  SEROUT SerialPin, BAUD, [temp]
  GOTO TOP


GetStall:
     SEROUT SerialPin, BAUD, [StallPin]
     GOTO TOP

GetName1:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        READ temp + nameData, inCmd(temp)
     NEXT
     SEROUT SerialPin, BAUD, [STR inCmd\DATA_LENGTH]
     GOTO TOP

GetName2:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        READ temp + nameData + 8, inCmd(temp)
     NEXT
     SEROUT SerialPin, BAUD, [STR inCmd\DATA_LENGTH]
     GOTO TOP

SetName1:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        WRITE temp + nameData, inCmd(1 + temp)
     NEXT
     GOTO GetAll

SetName2:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        WRITE temp + nameData + 8, inCmd(1 + temp)
     NEXT
     GOTO GetAll


GetPass1:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        READ temp + passData, inCmd(temp)
     NEXT
     SEROUT SerialPin, BAUD, [STR inCmd\DATA_LENGTH]
     GOTO TOP

GetPass2:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        READ temp + passData + 8, inCmd(temp)
     NEXT
     SEROUT SerialPin, BAUD, [STR inCmd\DATA_LENGTH]
     GOTO TOP

SetPass1:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        WRITE temp + passData, inCmd(1 + temp)
     NEXT
     GOTO GetAll

SetPass2:
     FOR temp = 0 TO (DATA_LENGTH - 1)
        WRITE temp + passData + 8, inCmd(1 + temp)
     NEXT
     GOTO GetAll

MotorsOff:
     PULSOUT MotorRightPin, rot0
     PULSOUT MotorLeftPin, rot0
     GOTO GetAll

SetSpeaker:
     var1 = inCmd(1)
     var1 = (var1 << 8) | inCmd(2)
     var2 = inCmd(3)
     var2 = (var2 << 8) | inCmd(4)
     IF (quiet = 1) THEN
      FREQOUT SpeakerPin, var1, $00
     ELSE
      FREQOUT SpeakerPin, var1, var2
     ENDIF
     GOTO GetAll

SetSpeaker2:
     var1 = inCmd(1)
     var1 = (var1 << 8) | inCmd(2)

     var2 = inCmd(3)
     var2 = (var2 << 8) | inCmd(4)

     var3 = inCmd(5)
     var3 = (var3 << 8) | inCmd(6)

     IF (quiet = 1) THEN
      FREQOUT SpeakerPin, var1, $00
     ELSE
      FREQOUT SpeakerPin, var1, var2, var3
     ENDIF
     GOTO GetAll

Motors:
      var1 = inCmd(1)
      var2 = inCmd(2)

READ ipreData+0, temp
 IF (var1 > 170) AND (var2 > 170) THEN
   rev_counter = 32
 left_pulse = rot1
 right_pulse = rot2

 FOR i_counter = 1 TO rev_counter
PULSOUT 12, right_pulse
PULSOUT 13, left_pulse
PAUSE 20
NEXT

 ENDIF


 IF (var1 > 170) AND (var2 < 150) THEN

  rev_counter = 32
 left_pulse = rot0
 right_pulse = rot1

 FOR i_counter = 1 TO rev_counter
PULSOUT 12, right_pulse
PULSOUT 13, left_pulse
PAUSE 20
NEXT

 ENDIF


 IF (var1 > 100) AND (var1 < 150) AND (var2 < 150) THEN

 FOR rev_counter = 1 TO 100

  IF(rev_counter>50) THEN

PULSOUT 12, rot1
PULSOUT 13, rot0
PAUSE 20

ENDIF

PULSOUT 14, 1000
PAUSE 20
NEXT

FOR rev_counter = 1 TO 100
PULSOUT 14, 500
PAUSE 20
NEXT

 ENDIF

 IF (var1 < 150) AND (var2 > 170) THEN

 rev_counter = 32
 left_pulse = rot2
 right_pulse = rot0

 FOR i_counter = 1 TO rev_counter
PULSOUT 12, right_pulse
PULSOUT 13, left_pulse
PAUSE 20
NEXT


 ENDIF


READ ipreData+1, temp

 IF (100<var1) AND (var1<150) AND (100 < var2) AND (var2<150) THEN

 rev_counter = 10
 left_pulse = rot1
 right_pulse = rot2

 FOR i_counter = 1 TO rev_counter
PULSOUT 12, right_pulse
PULSOUT 13, left_pulse
PAUSE 20
NEXT


  ENDIF


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'  Play Music

READ ipreData+2, temp  ' Fudge 2

   IF (50<var1) AND (var1<100) AND (50 < var2) AND (var2<100) THEN


   FOR rev_counter = 1 TO 2

FREQOUT 4, 500, 1400*3         'E
PAUSE 40
FREQOUT 4, 500, 1400*3         'E
PAUSE 40
FREQOUT 4, 500, 1500*3         'F
PAUSE 40
FREQOUT 4, 500, 1650*3         'G
PAUSE 40
FREQOUT 4, 500, 1650*3         'G
PAUSE 40
FREQOUT 4, 500, 1500*3         'F
PAUSE 40
FREQOUT 4, 500, 1400*3         'E
PAUSE 40
FREQOUT 4, 500, 1240*3         'D
PAUSE 40


FREQOUT 4, 500, 1100*3         'C
PAUSE 40
FREQOUT 4, 500, 1100*3         'C
PAUSE 40
FREQOUT 4, 500, 1240*3         'D
PAUSE 40
FREQOUT 4, 500, 1400*3         'E
PAUSE 40
FREQOUT 4, 900, 1400*3         'E
PAUSE 40
FREQOUT 4, 250, 1240*3         'D
PAUSE 8
FREQOUT 4, 800, 1240*3         'D
PAUSE 120

 NEXT


 FOR i_counter = 1 TO 15
FOR rev_counter = 1 TO 10
PULSOUT 14, 500
PAUSE 20
NEXT
FOR rev_counter = 1 TO 20
PULSOUT 14, 1000
PAUSE 20
NEXT
NEXT

FOR rev_counter = 1 TO 100
PULSOUT 14, 500
PAUSE 20
NEXT


  ENDIF



IF (var1 > 50)AND (var1 < 100) AND (var2 < 50) THEN


     FOR rev_counter = 1 TO 100

PULSOUT 14, 1000
PAUSE 20
NEXT

 ENDIF


 IF (var1 < 50) AND (var2 > 50) AND (var2 < 100) THEN


     FOR rev_counter = 1 TO 10

PULSOUT 14, 500
PAUSE 20
NEXT

 ENDIF


READ ipreData+3, temp

 IF (var1 < 25) AND (var2 < 25) THEN

  rev_counter = 32
 left_pulse = rot2
 right_pulse = rot1

 FOR i_counter = 1 TO rev_counter
PULSOUT 12, right_pulse
PULSOUT 13, left_pulse
PAUSE 20
NEXT

  ENDIF
  GOTO GetAll


OnLeftLED:
     LedLeftPin = 1
     GOTO GetAll

OffLeftLED:
     LedLeftPin = 0
     GOTO GetAll

OnCenterLED:
     LedCenterPin = 1
     GOTO GetAll

OffCenterLED:
     LedCenterPin = 0
     GOTO GetAll

OnRightLED:
     LedRightPin = 1
     GOTO GetAll

OffRightLED:
     LedRightPin = 0
     GOTO GetAll

OnAllLED:
     LedLeftPin = 1
     LedRightPin = 1
     LedCenterPin = 1
     GOTO GetAll

OffAllLED:
     LedLeftPin = 0
     LedRightPin = 0
     LedCenterPin = 0
     GOTO GetAll

SetLedAll:
  LedLeftPin = inCmd(1) & %00000001
  LedCenterPin = inCmd(2) & %00000001
  LedRightPin = inCmd(3) & %00000001
  GOTO GetAll

GetData:
  FOR temp = 0 TO (DATA_LENGTH - 1)
    READ temp + ipreData, inCmd(temp)
  NEXT
  SEROUT SerialPin, BAUD, [STR inCmd\DATA_LENGTH]
  GOTO TOP

SetData:
  FOR temp = 0 TO (DATA_LENGTH - 1)
     WRITE temp + ipreData, inCmd(1 + temp)
  NEXT
  GOTO GetAll

SetSingleData:
   temp = inCmd(1)
   WRITE temp + ipreData, inCmd(2)
   GOTO GetAll

SetEchoMode:
  echoMode = inCmd(1) & %00000001
  WRITE echoData, inCmd(1)
  WRITE sendData, inCmd(1)
  GOTO GetAll

GetInfo:
  SEROUT SerialPin, BAUD, ["Robot-Version:2.6.2,Robot:Boebot,Mode:Serial", LF]
  GOTO TOP
