#BlueJ class context
comment0.params=
comment0.target=Scribbler()
comment0.text=\n\ Construct\ a\ Scribbler\ object\ that\ is\ not\ connected\ to\ any\ port.\ \ Method\ {@link\ \#connect\ connect}\n\ must\ be\ called\ to\ connect\ this\ Scribbler\ to\ a\ port.\n
comment1.params=portName
comment1.target=Scribbler(java.lang.String)
comment1.text=\n\ Construct\ a\ Scribbler\ object\ and\ connect\ it\ to\ port\ portName.\ \ If\ the\ connection\ was\ successfully\ made\ then\ it\n\ is\ legal\ to\ invoke\ methods\ that\ require\n\ the\ scribbler\ be\ connected;\ if\ the\ connection\ was\ not\ successful\ then\ it\ is\ not\ legal\ to\ invoke\ \n\ methods\ that\ require\ the\ scribbler\ to\ be\ connected.\ \ Method\ {@link\ \#scribblerConnected\ scribblerConnected}\ can\ be\ used\ to\n\ determine\ if\ the\ connection\ was\ successfully\ made.\n\ \n\ @param\ portName\ \ the\ name\ of\ the\ port\ the\ Scribbler\ is\ attached\ to\ (e.g.,\ "COM1",\ "/dev/ttyS0")\n
comment10.params=
comment10.target=boolean\ getStall()
comment10.text=\n\ Returns\ whether\ the\ Scribbler\ has\ stalled\ (i.e.,\ stopped\ moving).\ \ Returns\ true\ iff\ the\ Scribbler\ has\ stalled.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\n
comment11.params=whichLight
comment11.target=int\ getLight(int)
comment11.text=\n\ Returns\ the\ state\ of\ one\ of\ the\ Scribbler's\ light\ sensors.\ \ whichLight\ specifies\ the\ light\ sensor\ to\ query.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\ and\ whichLight\ is\ Scribbler.SENSOR_LIGHT_LEFT\ (or\ 0),\ Scribbler.SENSOR_LIGHT_CENTER\ (or\ 1),\n\ or\ Scribbler.SENSOR_LIGHT_RIGHT\ (or\ 2).\n\ \n\ @param\ whichLight\ Specifies\ the\ light\ sensor\ to\ query.\ \ Must\ be\ Scribbler.SENSOR_LIGHT_LEFT\ (or\ 0),\n\ Scribbler.SENSOR_LIGHT_CENTER\ (or\ 1),\ or\ Scribbler.SENSOR_LIGHT_RIGHT\ (or\ 2).\n\ \n\ @return\ The\ value\ of\ the\ selected\ light\ sensor.\ \ The\ value\ will\ be\ non-negative,\ and\ a\ low\ value\ indicates\n\ low\ light,\ a\ high\ value\ indicates\ bright\ light.\n
comment12.params=
comment12.target=int[]\ getLight()
comment12.text=\n\ Returns\ the\ state\ of\ all\ three\ Scribbler\ light\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\n\ \n\ @return\ A\ three\ element\ array.\ \ element\ 0\ contains\ the\ value\ of\ the\ left\ sensor,\ element\ 1\ contains\ the\ value\n\ of\ the\ center\ sensor,\ and\ element\ 2\ contains\ the\ value\ of\ the\ right\ sensor.\ \ All\ values\ are\ non-negative,\n\ and\ low\ values\ indicate\ low\ light,\ high\ values\ indicate\ high\ light.\n
comment13.params=val
comment13.target=int\ _adjustLightLevel(int)
comment13.text=\n\ adjust\ scribbler\ 1\ light\ readings\ so\ that\ small\ values\ represent\ low\ light\ levels\ and\ large\ value\n\ represent\ bright\ light\ levels.\ \ This\ is\ only\ necessary\ for\ a\ Scribbler1.\n
comment14.params=whichIR
comment14.target=boolean\ getIR(int)
comment14.text=\n\ Returns\ the\ state\ of\ one\ of\ the\ Scribbler's\ IR\ sensors.\ \ whichIR\ specifies\ the\ IR\ sensor\ to\ query.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\ and\ whichIR\ is\ {@link\ \#SENSOR_IR_LEFT\ Scribbler.SENSOR_IR_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_IR_RIGHT\ Scribbler.SENSOR_IR_RIGHT}\ (or\ 1).\n\ \n\ @param\ whichIR\ Specifies\ the\ IR\ sensor\ to\ query.\ \ Should\ be\ {@link\ \#SENSOR_IR_LEFT\ Scribbler.SENSOR_IR_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_IR_RIGHT\ Scribbler.SENSOR_IR_RIGHT}\ (or\ 1).\n\ \n\ @return\ The\ value\ of\ the\ selected\ IR\ sensor.\ True\ means\ that\ an\ obstacle\ is\ NOT\ detected\ by\ the\ selected\n\ IR\ sensor,\ and\ false\ means\ that\ an\ obstacle\ IS\ detected\ by\ the\ sensor.\n
comment15.params=
comment15.target=boolean[]\ getIR()
comment15.text=\n\ Returns\ the\ state\ of\ both\ of\ the\ Scribbler's\ IR\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\n\ \n\ @return\ A\ two\ element\ boolean\ array\ containing\ the\ values\ of\ the\ IR\ sensort.\ True\ means\ that\ an\ obstacle\ is\n\ NOT\ detected\ by\ the\ selected\ IR\ sensor,\ and\ false\ means\ that\ an\ obstacle\ IS\ detected\ by\ the\ sensor.\n
comment16.params=whichSensor
comment16.target=boolean\ getLine(int)
comment16.text=\n\ Returns\ the\ state\ of\ one\ of\ the\ Scribbler's\ line\ sensors.\ \ whichSensor\ specifies\ the\ line\ sensor\ to\ query.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\ and\ whichSensor\ is\ {@link\ \#SENSOR_LINE_LEFT\ Scribbler.SENSOR_LINE_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_LINE_RIGHT\ Scribbler.SENSOR_LINE_RIGHT}\ (or\ 1).\n\ \n\ @param\ whichSensor\ Specifies\ the\ line\ sensor\ to\ query.\ \ Should\ be\ {@link\ \#SENSOR_LINE_LEFT\ Scribbler.SENSOR_LINE_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_LINE_RIGHT\ Scribbler.SENSOR_LINE_RIGHT}\ (or\ 1).\n\ \n\ @return\ The\ value\ of\ the\ selected\ line\ sensor.\ True\ means\ that\ a\ (dark)\ line\ is\ detected\ by\ the\ selected\n\ line\ sensor,\ and\ false\ means\ that\ a\ (dark)\ line\ is\ not\ detected\ by\ the\ sensor.\n
comment17.params=
comment17.target=boolean[]\ getLine()
comment17.text=\n\ Returns\ the\ state\ of\ both\ of\ the\ Scribbler's\ line\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\n\ \n\ @return\ A\ two\ element\ boolean\ array\ containing\ the\ values\ of\ the\ line\ sensort.\ True\ means\ that\ a\ (dark)\ line\n\ is\ detected\ by\ the\ selected\ line\ sensor,\ and\ false\ means\ that\ a\ (dark)\ line\ is\ not\ detected\ by\ the\ sensor.\n
comment18.params=
comment18.target=java.lang.String\ getInfo()
comment18.text=\n\ Returns\ the\ info\ string\ provided\ by\ the\ Scribbler.\ \ The\ specific\ information\ contains\ such\ things\ as\ the\ \n\ firmware\ version,\ the\ type\ of\ robot\ (i.e.,\ Scribbler)\ and\ the\ communication\ mode\ (e.g.,\ Serial).\n\ <p><p>\n\ <b>Precondition\:</b>\ portOpened\n\ \n\ @return\ A\ String\ containing\ information\ about\ the\ connected\ robot,\ such\ as\ robot\ type\ (e.g.,\ Scribbler),\n\ firmware\ version\ number,\ and\ communication\ mode\ (e.g.,\ Serial).\n
comment19.params=
comment19.target=double[]\ getFudge()
comment19.text=\n\ Returns\ the\ four\ "fudge\ factors"\ used\ to\ tweak\ the\ motors.\ \ Each\ value\ is\ between\ 0.0\ (inclusive)\ and\ 2.0\n\ (inclusive).\ A\ value\ of\ 1.0\ indicates\ no\ tweaking,\ values\ between\ 0.0\ and\ 1.0\ indicate\ a\ leftward\ adjustment,\n\ and\ values\ between\ 1.0\ and\ 2.0\ indicate\ a\ rightward\ adjustment.\ \ The\ further\ a\ value\ is\ away\ from\ 1.0,\ the\n\ larger\ the\ adjustment.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\n\ \n\ @return\ A\ four\ element\ array.\ \ Element\ 0\ is\ the\ adjustment\ for\ high\ forward\ speeds\ (i.e.,\ >\ 0.5),\ element\ 1\n\ is\ the\ adjustment\ for\ slow\ forward\ speeds\ (i.e.,\ &lt;\=\ 0.5),\ element\ 2\ is\ the\ adjustment\ for\ high\ backward\n\ speeds,\ element\ 3\ is\ the\ adjustment\ for\ slow\ backward\ speeds.\n
comment2.params=portName
comment2.target=boolean\ connect(java.lang.String)
comment2.text=\n\ Connect\ the\ Scribbler\ to\ port\ portName.\ \ If\ the\ Scribbler\ is\ already\ connected\ to\ a\ port\ it\ is\n\ first\ closed.\ \ If\ the\ connection\ was\ successfully\ made\ then\ it\ is\ legal\ to\ invoke\ methods\ that\ require\n\ the\ scribbler\ be\ connected;\ if\ the\ connection\ was\ not\ successful\ then\ it\ is\ not\ legal\ to\ invoke\ \n\ methods\ that\ require\ the\ scribbler\ to\ be\ connected.\ \ Methods\ {@link\ \#scribblerConnected\ scribblerConnected}\n\ and\ {@link\ \#flukeConnected\ flukeConnected}\ can\ be\ used\ to\ determine\ if\ the\ connection\ was\ successfully\ made.\n\ \n\ @param\ portName\ The\ name\ of\ the\ port\ the\ Scribbler\ is\ connected\ to\ (e.g.,\ "COM1",\ "/dev/ttyS0")\n\ @return\ true\ returned\ iff\ the\ connection\ to\ the\ Scribbler\ was\ successful\n\ \n
comment20.params=fastForward\ slowForward\ fastBackward\ slowBackward
comment20.target=void\ setFudge(double,\ double,\ double,\ double)
comment20.text=\n\ Sets\ the\ four\ "fudge\ factors"\ for\ tweaking\ the\ motors.\ \ Each\ value\ is\ between\ 0.0\ (inclusive)\ and\ 2.0\n\ (inclusive).\ A\ value\ of\ 1.0\ indicates\ no\ tweaking,\ values\ between\ 0.0\ and\ 1.0\ indicate\ a\ leftward\ adjustment,\n\ and\ values\ between\ 1.0\ and\ 2.0\ indicate\ a\ rightward\ adjustment.\ \ The\ further\ a\ value\ is\ away\ from\ 1.0,\ the\n\ larger\ the\ adjustment.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ and\ all\ four\ parameters\ between\ 0.0\ (inclusive)\ and\ 2.0\ (inclusive)\n\ \n\ @param\ fastForward\ Tweak\ value\ for\ fast\ forward\ speeds\ (i.e.,\ speed\ >\ 0.5\ )\n\ @param\ slowForward\ Tweak\ value\ for\ slow\ forward\ speeds\ (i.e.,\ speed\ &lt;\=\ 0.5\ )\n\ @param\ fastBackward\ Tweak\ value\ for\ fast\ backward\ speeds\ (i.e.,\ speed\ >\ 0.5\ )\n\ @param\ slowBackward\ Tweak\ value\ for\ slow\ backward\ speeds\ (i.e.,\ speed\ &lt;\=\ 0.5\ )\n
comment21.params=
comment21.target=java.lang.String\ getName()
comment21.text=\n\ Returns\ the\ name\ of\ the\ Scribbler.\ \ The\ name\ is\ set\ with\ {@link\ \#setName\ setName}.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n\ @return\ The\ name\ of\ the\ Scribbler.\n
comment22.params=newName
comment22.target=void\ setName(java.lang.String)
comment22.text=\n\ Sets\ the\ name\ of\ the\ Scribbler.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n\ @param\ newName\ String\ containing\ the\ new\ name\ of\ the\ Scribbler.\ \ Only\ the\ first\ 16\ characters\ of\ newName\ are\n\ used.\n
comment23.params=frequency\ duration
comment23.target=void\ beep(int,\ double)
comment23.text=\n\ Causes\ the\ Scribbler\ to\ emit\ a\ melodic\ single\ frequency\ tone.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n\ @param\ frequency\ The\ frequency\ of\ the\ tone\ to\ emit.\n\ @param\ duration\ The\ length\ of\ the\ tone\ to\ be\ emitted,\ in\ seconds.\n
comment24.params=frequency1\ frequency2\ duration
comment24.target=void\ beep(int,\ int,\ double)
comment24.text=\n\ Causes\ the\ Scribbler\ to\ emit\ a\ melodic\ dual\ frequency\ tone.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n\ @param\ frequency1\ The\ frequency\ of\ one\ of\ the\ tones\ to\ emit.\n\ @param\ frequency2\ The\ frequency\ of\ the\ other\ tone\ to\ emit.\n\ @param\ duration\ The\ length\ of\ the\ tone\ to\ be\ emitted,\ in\ seconds.\n
comment25.params=onOff
comment25.target=void\ setVolume(int)
comment25.text=\n\ Turns\ the\ volume\ of\ the\ scribbler\ on\ or\ off.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ onOff\ is\ Scribbler.VOLUME_OFF\ (or\ 0)\ or\ Scribbler.VOLUME_ON\ (or\ 1)\n\ \n\ @param\ onOff\ Value\ indicating\ whether\ to\ turn\ the\ volume\ on\ (Scribbler.VOLUME_ON\ or\ 1)\ or\ \n\ off\ (Scribbler.VOLUME_OFF\ or\ 0)\n
comment26.params=
comment26.target=void\ senses()
comment26.text=\n\ Opens\ a\ window\ that\ continually\ displays\ the\ sensor\ values\ of\ the\ Scribbler\ and/or\ Fluke.\ \ The\ values\ are\n\ updated\ every\ .5\ seconds.\n\ <p><p>\n\ Only\ one\ senses\ window\ is\ permitted\ to\ be\ opened\ for\ a\ particular\ Scribbler/Fluke;\ no\ action\ occurs\ if\ this\n\ method\ is\ invoked\ when\ a\ senses\ window\ is\ already\ opened.\ \ The\ window\ will\ stay\ opened\ until\ the\ user\ closes\n\ it\ (by\ clicking\ the\ window's\ close\ icon)\ or\ the\ {@link\ \#close\ close}\ method\ is\ invoked.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ or\ flukeConnected\n
comment27.params=
comment27.target=void\ camera()
comment27.text=\n\ Opens\ a\ window\ that\ continually\ displays\ the\ Fluke's\ camera\ image.\ \ The\ image\ is\ updated\ every\n\ second.\n\ <p><p>\n\ Only\ one\ camera\ window\ is\ permitted\ to\ be\ opened\ for\ a\ particular\ Scribbler/Fluke;\ no\ action\ occurs\ if\ this\n\ method\ is\ invoked\ when\ a\ camera\ window\ is\ already\ opened.\ \ The\ window\ will\ stay\ opened\ until\ the\ user\ closes\n\ it\ (by\ clicking\ the\ window's\ close\ icon)\ or\ the\ {@link\ \#close\ close}\ method\ is\ invoked.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ or\ flukeConnected\n
comment28.params=
comment28.target=void\ joyStick()
comment28.text=\n\ Opens\ a\ window\ that\ permits\ the\ user\ to\ control\ the\ movement\ of\ the\ Scribbler.\ \ The\ window\ allows\ the\ user\n\ to\ control\ the\ Scribbler\ using\ a\ joystick-like\ interface,\ permitting\ forward,\ backward,\ right,\ and\ left\n\ movement.\n\ <p><p>\n\ Only\ one\ joystick\ window\ is\ permitted\ to\ be\ opened\ for\ a\ particular\ Scribbler;\ no\ action\ occurs\ if\n\ this\ method\ is\ invoked\ when\ a\ joystick\ window\ is\ already\ opened.\ \ The\ window\ will\ stay\ opened\ until\ the\ user\n\ closes\ it\ (by\ clicking\ the\ window's\ close\ icon)\ or\ the\ {@link\ \#close\ close}\ method\ is\ invoked.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n
comment29.params=
comment29.target=void\ gamepad()
comment29.text=\n\ Opens\ a\ window\ that\ permits\ the\ user\ to\ control\ the\ movement\ of\ the\ Scribbler.\ \ The\ window\ allows\ the\ user\n\ to\ control\ the\ Scribbler\ using\ a\ joystick-like\ interface,\ permitting\ forward,\ backward,\ right,\ and\ left\n\ movement.\n\ <p><p>\n\ Only\ one\ joystick\ window\ is\ permitted\ to\ be\ opened\ for\ a\ particular\ Scribbler;\ no\ action\ occurs\ if\n\ this\ method\ is\ invoked\ when\ a\ joystick\ window\ is\ already\ opened.\ \ The\ window\ will\ stay\ opened\ until\ the\ user\n\ closes\ it\ (by\ clicking\ the\ window's\ close\ icon)\ or\ the\ {@link\ \#close\ close}\ method\ is\ invoked.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n
comment3.params=token
comment3.target=int[]\ parseVersion(java.lang.String)
comment3.text=\n\ Split\ a\ period-seperated\ string\ of\ ints\ into\ its\ component\ integers.\ \ The\ return\ value\ is\n\ an\ int\ array\ of\ these\ integers.\n
comment30.params=position\ onOff
comment30.target=void\ setLED(int,\ int)
comment30.text=\n\ Sets\ one\ (or\ all)\ of\ the\ Scribbler's\ LEDs\ on\ or\ off.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected;\ position\ is\ Scribbler.LED_LEFT\ (or\ 0),\ Scribbler.LED_CENTER\ (or\ 1),\ \n\ Scribbler.LED_RIGHT\ (or\ 2),\ or\ Scribbler.LED_ALL\ (or\ 3);\ onOff\ is\ Scribbler.LED_OFF\ (or\ 0)\ or\ Scribbler.LED_ON\ (or\ 1)\n
comment31.params=onOff
comment31.target=void\ setLEDFront(int)
comment31.text=\n\ Sets\ the\ front\ LED\ on\ the\ Fluke\ board\ on\ or\ off.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ onOff\ either\ Scribbler.LED_OFF\ (or\ 0)\ or\ Scribbler.LED_ON\ (or\ 1)\n\ \n\ @param\ onOff\ Specifies\ whether\ to\ turn\ on\ the\ LED\ (Scribbler.LED_ON)\ or\ turn\ it\ off\ (Scribbler.LED_OFF)\n
comment32.params=brightness
comment32.target=void\ setLEDBack(double)
comment32.text=\n\ Sets\ the\ back\ LED\ on\ the\ Fluke\ board\ to\ a\ specified\ brightness.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ and\ brightness\ between\ 0.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ brightness\ A\ value\ between\ 0.0\ and\ 1.0\ that\ specifies\ the\ brightness\ of\ the\ LED\n
comment33.params=whichSensor
comment33.target=int\ getObstacle(int)
comment33.text=\n\ Read\ one\ of\ the\ Fluke's\ IR\ obstacle\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ whichSensor\ is\ Scribbler.SENSOR_IR_LEFT\ (or\ 0),\ Scribbler.SENSOR_IR_CENTER\ (or\ 2),\ or\n\ Scribbler.SENSOR_IR_RIGHT\ (or\ 1)\n\ \n\ @param\ whichSensor\ Selects\ the\ Fluke\ IR\ sensor.\ \ Should\ be\ Scribbler.SENSOR_IR_LEFT\ (or\ 0),\ Scribbler.SENSOR_IR_CENTER\ (or\ 2),\ or\n\ Scribbler.SENSIR_IR_RIGHT\ (or\ 1)\n\ @return\ The\ value\ of\ the\ selected\ sensor.\ \ A\ low\ value\ means\ there\ are\ no\ obstacles\ detected,\ a\ high\ value\n\ means\ there\ is\ an\ obstacle\ detected.\ \ The\ return\ value\ is\ in\ the\ range\ 0..6400.\n
comment34.params=
comment34.target=int[]\ getObstacle()
comment34.text=\n\ Returns\ the\ values\ of\ all\ three\ obstacles\ sensors\ on\ the\ Fluke.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected\n\ \n\ @return\ a\ 3-element\ array\ containing\ the\ values\ of\ the\ left\ (in\ element\ 0),\ center\ (in\ element\ 1),\ and\n\ right\ (in\ element\ 2)\ obstacle\ sensors.\n
comment35.params=powerLevel
comment35.target=void\ setIRPower(int)
comment35.text=\n\ Sets\ the\ power\ level\ of\ the\ Fluke's\ IR\ obstacle\ sensors.\ \ The\ default\ value\ is\ 135.\ \ If\n\ {@link\ \#getObstacle\ getObstacle}\ always\ reports\ high\ values,\ try\ lowering\ the\ power\ level;\ if\ it\ always\n\ reports\ very\ low\ values,\ try\ increasing\ the\ power\ level.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ powerLevel\ between\ 0\ (inclusive)\ and\ 255\ (inclusive)\n\ \n\ @param\ powerLevel\ Specifies\ the\ power\ level\n
comment36.params=level
comment36.target=void\ darkenCamera(int)
comment36.text=\n\ Turn\ off\ the\ Fluke\ camera's\ auto-exposure,\ auto-gain,\ and\ lower\ the\ gain\ to\ the\ specified\ value.\ \ This\ is\n\ useful\ when\ using\ {@link\ \#getBright\ getBright}\ virtual\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ level\ between\ 0\ (inclusive)\ and\ 255\ (inclusive)\n\ \n\ @param\ level\ The\ camera's\ gain\ level,\ between\ 0\ and\ 255.\n\ \n
comment37.params=
comment37.target=void\ autoCamera()
comment37.text=\n\ Turn\ on\ the\ Fluke\ camera's\ auto-exposure,\ auto-gain,\ and\ auto-color-balance.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected\n\ \n
comment38.params=gain\ brightness\ exposure
comment38.target=void\ manualCamera(int,\ int,\ int)
comment38.text=\n\ Set\ the\ Fluke\ camera's\ gain,\ brightness,\ and\ exposore\ control\ to\ specific\ values.\ \ The\ default\ values\n\ are\:\ gain\:0,\ brightness\:\ 120,\ exposure\:65.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ all\ parameters\ between\ 0\ (inclusive)\ and\ 255\ (inclusive)\n
comment39.params=blob
comment39.target=void\ configureBlob(MyroBlobSpec)
comment39.text=\n\ Defines\ the\ blob\ used\ by\ {@link\ \#takePicture\ takePicture}(Scribbler.IMAGE_BLOB).\ \ A\ blob\ specifies\ a\ range\ of\ colors\n\ and\ is\ usually\ defined\ by\ calling\ defineBlob\ or\ getUserDefinedBlob\ in\ a\ MyroImage.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ blob\ not\ null\n\ \n\ @param\ blob\ Specifies\ the\ color\ range\ of\ the\ blob\n
comment4.params=
comment4.target=void\ close()
comment4.text=\n\ Close\ the\ connection\ between\ the\ computer\ and\ the\ Scribbler.\ \ Any\ threads\ associated\ with\ this\ robot\n\ (e.g.,\ senses,\ joystick)\ will\ be\ killed.\ \ After\ calling\ close\ the\ Scribbler\ cannot\ be\ accessed\ again\ unless\n\ {@link\ \#connect\ connect}\ is\ called\ to\ reestablish\ the\ connection.\n\ <p><p>\n\ It\ is\ important\ to\ invoke\ this\ method\ at\ the\ end\ of\ the\ program.\ \ Failure\ to\ do\ so\ may\ cause\ problems\ when\n\ connecting\ to\ the\ Scribbler\ in\ the\ future.\n
comment40.params=
comment40.target=double\ getBattery()
comment40.text=\n\ Gets\ the\ voltage\ of\ the\ Scribbler's\ battery.\ \ If\ the\ battery\ voltage\ drops\ below\ ~6.1V\ the\ Fluke's\ back\n\ LED\ will\ flash\ to\ alert\ you\ to\ change\ (or\ preferably\ recharge)\ the\ batteries.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected\n\ \n\ @return\ The\ voltage\ of\ the\ Scribbler's\ battery\n
comment41.params=whichSensor
comment41.target=int\ getBright(int)
comment41.text=\n\ Read\ one\ of\ the\ Fluke's\ virtual\ light\ sensors.\ \ The\ Fluke's\ virtual\ light\ sensors\ report\ the\ total\n\ intensity\ on\ the\ left,\ center,\ and\ right\ sides\ of\ the\ Fluke's\ camera.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ and\ whichSensor\ is\ Scribbler.SENSOR_LIGHT_LEFT\ (or\ 0),\n\ Scribbler.SENSOR_LIGHT_CENTER\ (or\ 1),\ or\ Scribbler.SENSOR_LIGHT_RIGHT\ (or\ 2).\n\ \n\ @param\ whichSensor\ Specifies\ the\ sensor\ to\ use.\ \ Must\ be\ Scribbler.SENSOR_LIGHT_LEFT\ (or\ 0),\ Scribbler.SENSOR_LIGHT_CENTER\ (or\ 1),\n\ or\ Scribbler.SENSOR_LIGHT_RIGHT\ (or\ 2).\n\ \n\ @return\ The\ intensity\ of\ the\ light\ in\ the\ selected\ sensor\ area.\n
comment42.params=
comment42.target=int[]\ getBright()
comment42.text=\n\ Returns\ the\ values\ of\ all\ three\ virtual\ light\ sensors\ on\ the\ Fluke\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected\n\ \n\ @return\ A\ 3-element\ array\ containing\ the\ values\ of\ the\ left\ (in\ element\ 0),\ center\ (in\ element\ 1),\ and\ right\n\ (in\ element\ 2)\ virtual\ light\ sensors.\n
comment43.params=translate\ rotate
comment43.target=void\ move(double,\ double)
comment43.text=\n\ Starts\ the\ Scribbler\ moving\ in\ the\ specified\ direction.\ \n\ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ and\ translate\ and\ rotate\ are\ both\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ translate\ Specifies\ the\ forward\ movement\ speed.\ \ Values\ >\ 0\ specify\ forward\ speed\ (with\ 1.0\ specifying\n\ full\ forward\ speed),\ values\ &lt;\ 0\ specify\ backward\ speed\ (with\ -1.0\ specifying\ full\ backward\ speed).\ \ 0\n\ specifies\ no\ forward\ or\ backward\ speed.\n\ \n\ @param\ rotate\ Specifies\ rotational\ speed.\ \ Values\ >\ 0\ specify\ counterclockwise\ rotation\ (with\ 1.0\ specifying\n\ full\ counterclockwise\ rotation),\ values\ &lt;\ 0\ specify\ clockwise\ rotation\ (with\ -1.0\ specifying\ full\n\ clockwise\ rotation).\ \ 0\ specifies\ no\ rotation\ at\ all.\n
comment44.params=speed\ numSeconds
comment44.target=void\ forward(double,\ double)
comment44.text=\n\ Moves\ the\ Scribbler\ in\ a\ forward\ direction\ at\ a\ specified\ speed\ with\ no\ rotational\ movement\ for\ a\ specified\n\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\ method\ will\n\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\=\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ forward\ speed.\ \ Positive\ values\ specify\ forward\ movement\ (1.0\ is\ full\ forward\ speed),\n\ negative\ values\ specify\ backward\ movement\ (-1.0\ is\ full\ backward\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment45.params=speed
comment45.target=void\ forward(double)
comment45.text=\n\ Starts\ the\ Scribbler\ moving\ forward\ at\ a\ specified\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\n\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ speed.\ \ Positive\ values\ specify\ forward\ movement\ (1.0\ is\ full\ forward\ speed),\n\ negative\ values\ specify\ backward\ movement\ (-1.0\ is\ full\ backward\ speed).\n\ \n
comment46.params=
comment46.target=void\ forward()
comment46.text=\n\ Starts\ the\ Scribbler\ moving\ forward\ at\ full\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\ continue\ to\n\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ {@link\ \#turnRight\ turnRight},\n\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n
comment47.params=
comment47.target=void\ stop()
comment47.text=\n\ Causes\ the\ Scribbler\ to\ stop\ moving.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n
comment48.params=speed\ numSeconds
comment48.target=void\ backward(double,\ double)
comment48.text=\n\ Moves\ the\ Scribbler\ in\ a\ backward\ direction\ at\ a\ specified\ speed\ with\ no\ rotational\ movement\ for\ a\ specified\n\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\ method\ will\n\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\=\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ backward\ speed.\ \ Positive\ values\ specify\ backward\ movement\ (1.0\ is\ full\ backward\n\ speed),\ negative\ values\ specify\ forward\ movement\ (-1.0\ is\ full\ forward\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment49.params=speed
comment49.target=void\ backward(double)
comment49.text=\n\ Starts\ the\ Scribbler\ moving\ backward\ at\ a\ specified\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\n\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ speed.\ \ Positive\ values\ specify\ backward\ movement\ (1.0\ is\ full\ backward\ speed),\n\ negative\ values\ specify\ forward\ movement\ (-1.0\ is\ full\ forward\ speed).\n\ \n
comment5.params=
comment5.target=boolean\ scribblerConnected()
comment5.text=\n\ Returns\ whether\ a\ scribbler\ or\ Scribbler2\ is\ currently\ connected.\n\ \n\ @return\ true\ iff\ a\ Scribbler\ or\ Scribbler2\ is\ currently\ connected\n\ \n
comment50.params=
comment50.target=void\ backward()
comment50.text=\n\ Starts\ the\ Scribbler\ moving\ backward\ at\ full\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\ continue\ to\n\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n
comment51.params=speed\ numSeconds
comment51.target=void\ turnLeft(double,\ double)
comment51.text=\n\ Moves\ the\ Scribbler\ in\ a\ counterclockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement\n\ for\ a\ specified\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\n\ method\ will\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\=\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ counterclockwise\ rotation\ \n\ (1.0\ is\ full\ counterclockwise\ speed),\n\ negative\ values\ specify\ clockwise\ rotation\ (-1.0\ is\ full\ clockwise\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment52.params=speed
comment52.target=void\ turnLeft(double)
comment52.text=\n\ Moves\ the\ Scribbler\ in\ a\ counterclockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement.\n\ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ counterclockwise\ rotation\ (1.0\ is\ full\n\ counterclockwise\ speed),\ negative\ values\ specify\ clockwise\ rotation\ (-1.0\ is\ full\ clockwise\ speed).\n\ \n
comment53.params=
comment53.target=void\ turnLeft()
comment53.text=\n\ Moves\ the\ Scribbler\ in\ a\ counterclockwise\ rotation\ at\ full\ speed\ with\ no\ forward\ or\ backward\ movement.\n\ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n
comment54.params=speed\ numSeconds
comment54.target=void\ turnRight(double,\ double)
comment54.text=\n\ Moves\ the\ Scribbler\ in\ a\ clockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement\n\ for\ a\ specified\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\n\ method\ will\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\=\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ clockwise\ rotation\ (1.0\ is\ full\n\ clockwise\ speed),\ negative\ values\ specify\ counterclockwise\ rotation\ (-1.0\ is\ full\ counterclockwise\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment55.params=speed
comment55.target=void\ turnRight(double)
comment55.text=\n\ Moves\ the\ Scribbler\ in\ a\ clockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement.\ The\n\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ clockwise\ rotation\ \n\ (1.0\ is\ full\ clockwise\ speed),\n\ negative\ values\ specify\ counterclockwise\ rotation\ (-1.0\ is\ full\ counterclockwise\ speed).\n\ \n
comment56.params=
comment56.target=void\ turnRight()
comment56.text=\n\ Moves\ the\ Scribbler\ in\ a\ clockwise\ rotation\ at\ full\ speed\ with\ no\ forward\ or\ backward\ movement.\ \ The\ Scribbler\n\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\n\ \n
comment57.params=left\ right
comment57.target=void\ motors(double,\ double)
comment57.text=\n\ Starts\ the\ Scribbler\ moving\ by\ specifying\ the\ amount\ of\ power\ going\ to\ each\ wheel.\ The\ Scribbler\ will\ continue\n\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected,\ and\ left\ and\ right\ are\ both\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ left\ Specifies\ the\ speed\ of\ the\ left\ wheel.\ \ Values\ >\ 0\ specify\ forward\ speed\ (with\ 1.0\ specifying\n\ full\ forward\ speed),\ values\ &lt;\ 0\ specify\ backward\ speed\ (with\ -1.0\ specifying\ full\ backward\ speed).\ \ 0\n\ specifies\ no\ forward\ or\ backward\ speed.\n\ \n\ @param\ right\ Specifies\ the\ speed\ of\ the\ right\ wheel.\ \ Values\ >\ 0\ specify\ forward\ speed\ (with\ 1.0\ specifying\n\ full\ forward\ speed),\ values\ &lt;\ 0\ specify\ backward\ speed\ (with\ -1.0\ specifying\ full\ backward\ speed).\ \ 0\n\ specifies\ no\ forward\ or\ backward\ speed.\n
comment58.params=speed
comment58.target=void\ translate(double)
comment58.text=\n\ Starts\ the\ Scribbler\ moving\ forward\ or\ backward\ at\ a\ specified\ speed\ without\ changing\ the\ Scribbler's\ current\ \n\ rotational\ movement.\ \ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\n\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\n\ {@link\ \#turnLeft\ turnLeft},\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\n\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ speed.\ \ Positive\ values\ specify\ forward\ movement\ (1.0\ is\ full\ forward\ speed),\n\ negative\ values\ specify\ backward\ movement\ (-1.0\ is\ full\ backward\ speed).\n\ \n
comment59.params=speed
comment59.target=void\ rotate(double)
comment59.text=\n\ Starts\ the\ Scribbler\ rotating\ at\ a\ specified\ speed\ without\ changing\ the\ Scribbler's\ current\ forward\ or\ backward\n\ movement.\ \ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ counterclockwise\ rotation\ (1.0\ is\ full\n\ counterclockwise\ speed),\ negative\ values\ specify\ clockwise\ rotation\ (-1.0\ is\ full\ clockwise\ speed).\n\ \n
comment6.params=
comment6.target=boolean\ scribbler2Connected()
comment6.text=\n\ Returns\ whether\ a\ scribbler2\ is\ currently\ connected.\n\ \n\ @return\ true\ iff\ a\ Scribbler2\ is\ currently\ connected.\n
comment60.params=imageType
comment60.target=MyroImage\ takePicture(int)
comment60.text=\n\ Takes\ a\ picture\ with\ Fluke's\ camera.\ \ The\ imageType\ parameter\ determines\ what\ kind\ of\ picture\ is\ taken.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected,\ imageType\ is\ Scribbler.IMAGE_COLOR\ (or\ 0),\ Scribbler.IMAGE_GRAY\ (or\ 1),\ or\n\ Scribbler.IMAGE_BLOB\ (or\ 2)\n\ \n\ @param\ imageType\ Specifies\ the\ type\ of\ picture\ to\ take.\ \ Scribbler.IMAGE_COLOR,\ Scribbler.IMAGE_GRAY,\ or\ Scribbler.IMAGE_BLOB\n
comment61.params=
comment61.target=MyroBlobImageInfo\ getBlob()
comment61.text=\n\ Get\ info\ about\ the\ blob\ image.\ \ The\ returned\ MyroBlobImageInfo\ contains\ the\ number\ of\ pixels\ in\ the\ blob,\n\ the\ average\ X\ coordinate\ and\ the\ average\ Y\ coordinate.\n\ <p><p>\n\ <b>Precondition\:</b>\ flukeConnected\n\ \n\ @return\ A\ MyroBlobImageInfo\ instance\ that\ has\ information\ about\ the\ blob\ image\ (number\ of\ pixels\ in\ the\n\ blob,\ and\ average\ location\ of\ the\ blob)\n
comment62.params=message
comment62.target=void\ _write(int[])
comment62.text=\n\ Write\ a\ sequence\ of\ ints\ to\ the\ robot.\ \ Note\ that\ the\ difference\ between\ _write\ and\ _writePadded\n\ is\ that\ _write\ will\ not\ pad\ the\ message\ to\ 9\ characters.\n
comment63.params=messageString
comment63.target=void\ _writePadded(int[])
comment63.text=\n\ Send\ the\ values\ contained\ in\ messageString\ to\ the\ Scribbler.\ \ If\ the\ message\ has\ less\ than\ 9\ values\ then\n\ it\ is\ padded\ with\ zeros\ so\ that\ a\ 9-byte\ message\ is\ sent.\ \ It\ is\ assumed\ that\ the\ values\ in\ messageString\n\ are\ all\ between\ 0\ and\ 255.\n
comment64.params=numBytes
comment64.target=int[]\ _read(int)
comment64.text=\n\ Read\ numBytes\ from\ the\ Scribbler\ and\ return\ an\ array\ containing\ these\ values.\ \ The\ returned\ values\ will\ all\n\ be\ between\ 0\ and\ 255.\n
comment65.params=
comment65.target=int[]\ _readLine()
comment65.text=\n\ Read\ bytes\ from\ the\ Scribbler\ until\ an\ eol\ (ASCII\ 10,\ line\ feed)\ character\ is\ encountered.\ \ The\ values\n\ read\ (not\ including\ the\ eol)\ will\ be\ returned\ in\ the\ array.\ \ All\ values\ in\ the\ array\ will\ be\ between\n\ 0\ and\ 255.\n
comment66.params=
comment66.target=void\ _flushInput()
comment66.text=\n\ Read\ any\ remaining\ data\ from\ the\ Scribbler\ and\ throw\ them\ out.\n
comment67.params=translate\ rotate
comment67.target=void\ _adjustSpeed(double,\ double)
comment67.text=\n\ Set\ the\ Scribbler\ motors\ so\ the\ robot\ is\ moving\ in\ the\ specified\ direction.\n
comment68.params=command
comment68.target=void\ _set(int)
comment68.text=\n\ Send\ one\ of\ the\ parameterless\ set\ commands\ to\ the\ Scribbler.\ \ Parameter\ command\ contains\ the\ opcode.\ \ The\n\ command\ echo\ from\ the\ Scribbler\ is\ read\ and\ a\ sanity\ check\ is\ performed\ on\ the\ echo.The\ 11\ byte\ response\ is\n\ also\ read\ from\ the\ Scribbler\ and\ stored\ in\ instance\ field\ _lastSensors.\ \ Only\ one\ thread\ can\ can\ communicate\ \n\ with\ the\ Scribbler\ at\ a\ time.\n
comment69.params=command\ value1\ value2
comment69.target=void\ _set(int,\ int,\ int)
comment69.text=\n\ Send\ one\ of\ the\ two\ parameter\ set\ commands\ to\ the\ Scribbler.\ \ The\ command\ opcode\ and\ the\ two\ parameters\n\ are\ passed\ to\ this\ method.\ \ The\ command\ echo\ is\ read\ from\ the\ Scribbler\ and\ a\ sanity\ check\ is\ performed\ on\n\ the\ echo.\ \ The\ 11\ byte\ response\ is\ also\ read\ from\ the\ Scribbler\ and\ stored\ in\ instance\ field\ _lastSensors.\n\ Only\ one\ thread\ can\ can\ communicate\ with\ the\ Scribbler\ at\ a\ time.\n
comment7.params=
comment7.target=boolean\ flukeConnected()
comment7.text=\n\ Indicates\ whether\ the\ robot\ has\ a\ Fluke\ board\ attached\ to\ it.\n\ \n\ @return\ true\ iff\ a\ Fluke\ board\ is\ present\ on\ the\ robot\n
comment70.params=command\ values
comment70.target=void\ _set(int,\ int[])
comment70.text=\n\ Send\ one\ of\ the\ set\ commands\ to\ the\ Scribbler.\ \ The\ command\ opcode\ is\ passed\ to\ the\ method,\ and\ parameters\ to\n\ the\ command,\ if\ any,\ are\ contained\ in\ an\ array\ also\ passed\ to\ the\ method.\ \ The\ command\ echo\ is\ read\ from\ the\n\ Scribbler\ and\ a\ sanity\ check\ is\ performed\ on\ the\ echo.\ \ The\ 11\ byte\ response\ is\ also\ read\ from\ the\ Scribbler\n\ and\ stored\ in\ instance\ field\ _lastSensors.\ \ Only\ one\ thread\ can\ can\ communicate\ with\ the\ Scribbler\ at\ a\ time.\n
comment71.params=
comment71.target=int[]\ _getAll()
comment71.text=\n\ Send\ a\ get_all\ command\ to\ the\ Scribbler\ and\ store\ the\ data\ received\ in\ instance\ field\ _lastSensors.\ \ Only\ one\n\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Scribbler.\n
comment72.params=command\ numResponseBytes
comment72.target=int[]\ _get(int,\ int)
comment72.text=\n\ Send\ a\ get\ command\ to\ the\ Scribbler\ that\ expects\ a\ fixed-size\ response.\ \ The\ command\ opcode\ is\ passed\ to\ this\n\ method\ as\ well\ as\ the\ number\ of\ bytes\ expected\ in\ the\ Scribbler's\ response.\ \ The\ command\ echo\ is\ read\ from\ the\n\ Scribbler\ and\ a\ sanity\ check\ is\ performed\ on\ the\ echo.\ \ If\ there\ are\ response\ bytes\ expected\ they\ are\ read\ and\n\ stored\ in\ an\ array\ that\ is\ returned\ to\ the\ invoker.\ \ Only\ one\ thread\ at\ a\ time\ can\ communicate\ with\ the\n\ Scribbler.\n
comment73.params=command
comment73.target=int[]\ _getLine(int)
comment73.text=\n\ Send\ a\ get\ command\ to\ the\ Scribbler\ that\ expects\ a\ response\ terminted\ by\ eol.\ \ The\ command\ opcode\ is\ passed\n\ to\ this\ method.\ \ The\ command\ echo\ is\ read\ from\ the\ Scribbler\ and\ a\ sanity\ check\ performed\ on\ the\ echo.\ \ The\n\ eol-terminate\ response\ is\ read\ from\ the\ Scribbler\ and\ returned\ (without\ the\ eol)\ to\ the\ caller.\ \ Only\ one\n\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Scribbler.\n
comment74.params=command
comment74.target=void\ _setFluke(int)
comment74.text=\n\ Send\ a\ set\ command\ to\ the\ Fluke\ that\ does\ not\ expect\ a\ response.\ \ The\ command\ opcode\ is\ passed\ to\ the\n\ method.\ \ Only\ one\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Fluke/Scribbler.\n
comment75.params=command\ data
comment75.target=void\ _setFluke(int,\ int)
comment75.text=\n\ Send\ a\ set\ command\ to\ the\ Fluke\ that\ does\ not\ expect\ a\ response.\ \ The\ command\ opcode\ and\ one\ byte\ of\ data\n\ are\ passed\ as\ parameters\ to\ this\ method.\ \ Only\ one\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Fluke/\n\ Scribbler.\n
comment76.params=command\ data
comment76.target=void\ _setFluke(int,\ int[])
comment76.text=\n\ Send\ a\ set\ command\ to\ the\ Fluke\ that\ does\ not\ expect\ a\ response.\ \ The\ command\ opcode\ and\ the\ data\ for\ the\ \n\ command\ are\ passed\ as\ parameters\ to\ this\ method.\ \ Only\ one\ thread\ at\ a\ time\ can\ communicate\ with\ the\n\ Fluke/Scribbler.\n
comment77.params=addr\ value
comment77.target=void\ _set_cam_param(int,\ int)
comment77.text=\n\ Send\ a\ SET_CAM_PARAM\ command\ to\ the\ Fluke.\ \ The\ parameter\ address\ and\ value\ are\ sent\ as\ parameters.\n\ The\ Fluke\ takes\ some\ time\ (150\ msec)\ to\ reconfigure\ itself\ so\ we'll\ be\ sure\ to\ wait\ after\ sending\ the\n\ command.\n
comment78.params=command\ numResponseBytes
comment78.target=int[]\ _getFluke(int,\ int)
comment78.text=\n\ Send\ a\ get\ command\ to\ the\ Fluke.\ \ The\ command\ opcode\ is\ passed\ to\ the\ method\ as\ well\ as\ the\ number\ of\n\ response\ bytes\ expected.\ \ Only\ one\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Fluke/Scribbler.\n
comment79.params=command\ data\ numResponseBytes
comment79.target=int[]\ _getFluke(int,\ int,\ int)
comment79.text=\n\ Send\ a\ command\ with\ data\ to\ the\ fluke.\ \ The\ command\ opcode\ and\ command\ data\ are\ passed\ to\ the\ method\n\ as\ well\ as\ the\ number\ of\ response\ bytes\ expected.\ \ Only\ one\ trhead\ at\ a\ time\ can\ communicate\ with\n\ the\ Fluke/Scribbler.\n
comment8.params=
comment8.target=boolean\ portOpened()
comment8.text=\n\ Indicates\ whether\ the\ port\ connecting\ to\ the\ robot\ has\ been\ opened.\ \ Note\ that\ it\ if\ true\n\ is\ returned\ it\ isn't\ necessarily\ know\ what\ kind\ of\ robot\ is\ connected\ (e.g.,\ scribler\ or\ fluke);\n\ {@link\ \#flukeConnected\ flukeConnected}\ or\ {@link\ \#scribblerConnected\ scribblerConnected}\ should\n\ be\ used\ to\ determine\ this.\n\ \n\ @return\ true\ iff\ the\ connection\ to\ the\ robot\ has\ been\ established.\n
comment80.params=command
comment80.target=int[]\ _getJpegHeader(int)
comment80.text=\n\ get\ a\ jpeg\ header\ from\ the\ fluke\ and\ return\ it.\ \ The\ command\ should\ be\ either\ GET_JPEG_GRAY_HEADER\n\ or\ GET_JPEG_COLOR_HEADER.\n
comment81.params=command
comment81.target=int[]\ _getJpegScan(int)
comment81.text=\n\ \n
comment82.params=message\ echo
comment82.target=boolean\ _checkEcho(int[],\ int[])
comment82.text=\n\ Compare\ the\ echo\ with\ the\ original\ message.\ \ If\ there\ are\ differences\ print\ a\ message.\n\ \n\ @return\ true\ iff\ the\ original\ message\ and\ echo\ are\ the\ same.\n
comment83.params=win\ xlow\ ylow\ xhigh\ yhigh\ xstep\ ystep
comment83.target=void\ _setImageWindow(int,\ int,\ int,\ int,\ int,\ int,\ int)
comment83.text=\n\ Defines\ an\ image\ window\ on\ the\ fluke.\ \ The\ image\ is\ from\ (xlow,ylow)\ to\ (xhigh,yhigh).\ \ xstep\ and\ ystep\n\ specify\ which\ pixels\ are\ included\ (1\=all\ pixels,\ 2\=every\ other\ pixel,\ etc.).\ \ parameter\ win\ specifies\ which\n\ window\ to\ define\ (0..2)\n
comment84.params=y\ u\ v
comment84.target=java.awt.Color\ _calcColor(int,\ int,\ int)
comment84.text=\n\ Calcaulate\ a\ rgb\ color\ based\ on\ yuv\ specification.\n
comment85.params=
comment85.target=MyroColorImage\ _readColorJpegImage()
comment85.text=\n\ Read\ the\ 256x192\ jpeg\ color\ image\ from\ the\ fluke\ board\ and\ return\ it\ as\ a\ MyroColorImage\ instance.\n
comment86.params=
comment86.target=MyroGrayImage\ _readGrayJpegImage()
comment86.text=\n\ Read\ the\ 256x192\ jpeg\ grayscale\ image\ from\ the\ fluke\ board\ and\ return\ it\ as\ a\ MyroColorImage\ instance.\n
comment87.params=
comment87.target=MyroColorImage\ _readColorImage()
comment87.text=\n\ Read\ the\ 256x192\ color\ image\ from\ the\ fluke\ board\ and\ return\ it\ as\ a\ MyroColorImage\ instance.\n
comment88.params=
comment88.target=MyroGrayImage\ _readGrayImage()
comment88.text=\n\ Read\ a\ 128x96\ gray\ image\ from\ the\ Fluke\ and\ return\ it\ as\ a\ 256x192\ MyroGrayImage.\n
comment89.params=
comment89.target=MyroImage\ _readBlobImage()
comment89.text=\n\ Read\ a\ blob\ (i.e.,\ RLE)\ image\ from\ the\ Fluke\ and\ return\ it\ as\ a\ 256x192\ MyroGrayImage.\ \ Because\ we'll\n\ need\ to\ call\ i/o\ routines\ twice\ we\ need\ to\ be\ synchronized.\n
comment9.params=
comment9.target=void\ reset()
comment9.text=\n\ resets\ the\ Scribbler.\n\ <p><p>\n\ <b>Precondition\:</b>\ scribblerConnected()\n
comment90.params=a1\ a2
comment90.target=int\ _versionCompare(int[],\ int[])
comment90.text=\n\ compares\ two\ arrays\ of\ ints\ and\ returns\ an\ indicatation\ of\ how\ they\ compare.\ \ \n
numComments=91
