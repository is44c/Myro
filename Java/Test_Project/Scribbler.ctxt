#BlueJ class context
comment0.params=portName
comment0.target=Scribbler(java.lang.String)
comment0.text=\n\ Construct\ a\ Scribbler\ object\ and\ connect\ it\ to\ port\ portName.\ \ If\ the\ connection\ was\ successfully\ made\ then\ it\n\ is\ legal\ to\ invoke\ methods\ that\ require\n\ the\ scribbler\ be\ connected;\ if\ the\ connection\ was\ not\ successful\ then\ it\ is\ not\ legal\ to\ invoke\ \n\ methods\ that\ require\ the\ scribbler\ to\ be\ connected.\ \ Method\ {@link\ \#isConnected\ isConnected}\ can\ be\ used\ to\n\ determine\ if\ the\ connection\ was\ successfully\ made.\n\ \n\ @param\ portName\ \ the\ name\ of\ the\ port\ the\ Scribbler\ is\ attached\ to\ (e.g.,\ "COM1",\ "/dev/ttyS0")\n
comment1.params=portName
comment1.target=boolean\ connect(java.lang.String)
comment1.text=\n\ Connect\ the\ Scribbler\ to\ port\ portName.\ \ If\ the\ Scribbler\ is\ already\ connected\ to\ a\ port\ it\ is\n\ first\ closed.\ \ If\ the\ connection\ was\ successfully\ made\ then\ it\ is\ legal\ to\ invoke\ methods\ that\ require\n\ the\ scribbler\ be\ connected;\ if\ the\ connection\ was\ not\ successful\ then\ it\ is\ not\ legal\ to\ invoke\ \n\ methods\ that\ require\ the\ scribbler\ to\ be\ connected.\ \ Method\ {@link\ \#isConnected\ isConnected}\ can\ be\ used\ to\n\ determine\ if\ the\ connection\ was\ successfully\ made.\n\ \n\ @param\ portName\ The\ name\ of\ the\ port\ the\ Scribbler\ is\ connected\ to\ (e.g.,\ "COM1",\ "/dev/ttyS0")\n\ @return\ true\ returned\ iff\ the\ connection\ to\ the\ Scribbler\ was\ successful\n\ \n
comment10.params=whichSensor
comment10.target=boolean\ getLine(int)
comment10.text=\n\ Returns\ the\ state\ of\ one\ of\ the\ Scribbler's\ line\ sensors.\ \ whichSensor\ specifies\ the\ line\ sensor\ to\ query.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\ and\ whichSensor\ is\ {@link\ \#SENSOR_LINE_LEFT\ SENSOR_LINE_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_LINE_RIGHT\ SENSOR_LINE_RIGHT}\ (or\ 1).\n\ \n\ @param\ whichSensor\ Specifies\ the\ line\ sensor\ to\ query.\ \ Should\ be\ {@link\ \#SENSOR_LINE_LEFT\ SENSOR_LINE_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_LINE_RIGHT\ SENSOR_LINE_RIGHT}\ (or\ 1).\n\ \n\ @return\ The\ value\ of\ the\ selected\ line\ sensor.\ True\ means\ that\ a\ (dark)\ line\ is\ detected\ by\ the\ selected\n\ line\ sensor,\ and\ false\ means\ that\ a\ (dark)\ line\ is\ not\ detected\ by\ the\ sensor.\n
comment11.params=
comment11.target=boolean[]\ getLine()
comment11.text=\n\ Returns\ the\ state\ of\ both\ of\ the\ Scribbler's\ line\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n\ \n\ @return\ A\ two\ element\ boolean\ array\ containing\ the\ values\ of\ the\ line\ sensort.\ True\ means\ that\ a\ (dark)\ line\n\ is\ detected\ by\ the\ selected\ line\ sensor,\ and\ false\ means\ that\ a\ (dark)\ line\ is\ not\ detected\ by\ the\ sensor.\n
comment12.params=
comment12.target=java.lang.String\ getInfo()
comment12.text=\n\ Returns\ the\ info\ string\ provided\ by\ the\ Scribbler.\ \ The\ specific\ information\ contains\ such\ things\ as\ the\ \n\ firmware\ version,\ the\ type\ of\ robot\ (i.e.,\ Scribbler)\ and\ the\ communication\ mode\ (e.g.,\ Serial).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n\ \n\ @return\ A\ String\ containing\ information\ about\ the\ connected\ robot,\ such\ as\ robot\ type\ (e.g.,\ Scribbler),\n\ firmware\ version\ number,\ and\ communication\ mode\ (e.g.,\ Serial).\n
comment13.params=
comment13.target=double[]\ getFudge()
comment13.text=\n\ Returns\ the\ four\ "fudge\ factors"\ used\ to\ tweak\ the\ motors.\ \ Each\ value\ is\ between\ 0.0\ (inclusive)\ and\ 2.0\n\ (inclusive).\ A\ value\ of\ 1.0\ indicates\ no\ tweaking,\ values\ between\ 0.0\ and\ 1.0\ indicate\ a\ leftward\ adjustment,\n\ and\ values\ between\ 1.0\ and\ 2.0\ indicate\ a\ rightward\ adjustment.\ \ The\ further\ a\ value\ is\ away\ from\ 1.0,\ the\n\ larger\ the\ adjustment.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n\ \n\ @return\ A\ four\ element\ array.\ \ Element\ 0\ is\ the\ adjustment\ for\ high\ forward\ speeds\ (i.e.,\ >\ 0.5),\ element\ 1\n\ is\ the\ adjustment\ for\ slow\ forward\ speeds\ (i.e.,\ &lt;\=\ 0.5),\ element\ 2\ is\ the\ adjustment\ for\ high\ backward\n\ speeds,\ element\ 3\ is\ the\ adjustment\ for\ slow\ backward\ speeds.\n
comment14.params=fastForward\ slowForward\ fastBackward\ slowBackward
comment14.target=void\ setFudge(double,\ double,\ double,\ double)
comment14.text=\n\ Sets\ the\ four\ "fudge\ factors"\ for\ tweaking\ the\ motors.\ \ Each\ value\ is\ between\ 0.0\ (inclusive)\ and\ 2.0\n\ (inclusive).\ A\ value\ of\ 1.0\ indicates\ no\ tweaking,\ values\ between\ 0.0\ and\ 1.0\ indicate\ a\ leftward\ adjustment,\n\ and\ values\ between\ 1.0\ and\ 2.0\ indicate\ a\ rightward\ adjustment.\ \ The\ further\ a\ value\ is\ away\ from\ 1.0,\ the\n\ larger\ the\ adjustment.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\ and\ all\ four\ parameters\ between\ 0.0\ (inclusive)\ and\ 2.0\ (inclusive)\n\ \n\ @param\ fastForward\ Tweak\ value\ for\ fast\ forward\ speeds\ (i.e.,\ speed\ >\ 0.5\ )\n\ @param\ slowForward\ Tweak\ value\ for\ slow\ forward\ speeds\ (i.e.,\ speed\ &lt;\=\ 0.5\ )\n\ @param\ fastBackward\ Tweak\ value\ for\ fast\ backward\ speeds\ (i.e.,\ speed\ >\ 0.5\ )\n\ @param\ slowBackward\ Tweak\ value\ for\ slow\ backward\ speeds\ (i.e.,\ speed\ &lt;\=\ 0.5\ )\n
comment15.params=
comment15.target=java.lang.String\ getName()
comment15.text=\n\ Returns\ the\ name\ of\ the\ Scribbler.\ \ The\ name\ is\ set\ with\ {@link\ \#setName\ setName}.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n\ @return\ The\ name\ of\ the\ Scribbler.\n
comment16.params=newName
comment16.target=void\ setName(java.lang.String)
comment16.text=\n\ Sets\ the\ name\ of\ the\ Scribbler.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n\ @param\ newName\ String\ containing\ the\ new\ name\ of\ the\ Scribbler.\ \ Only\ the\ first\ 16\ characters\ of\ newName\ are\n\ used.\n
comment17.params=duration\ frequency
comment17.target=void\ beep(double,\ int)
comment17.text=\n\ Causes\ the\ Scribbler\ to\ emit\ a\ melodic\ single\ frequency\ tone.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n\ @param\ duration\ The\ length\ of\ the\ tone\ to\ be\ emitted,\ in\ seconds.\n\ @param\ frequency\ The\ frequency\ of\ the\ tone\ to\ emit.\n
comment18.params=duration\ frequency1\ frequency2
comment18.target=void\ beep(double,\ int,\ int)
comment18.text=\n\ Causes\ the\ Scribbler\ to\ emit\ a\ melodic\ dual\ frequency\ tone.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n\ @param\ duration\ The\ length\ of\ the\ tone\ to\ be\ emitted,\ in\ seconds.\n\ @param\ frequency1\ The\ frequency\ of\ one\ of\ the\ tones\ to\ emit.\n\ @param\ frequency2\ The\ frequency\ of\ the\ other\ tone\ to\ emit.\n
comment19.params=
comment19.target=void\ senses()
comment19.text=\n\ Opens\ a\ window\ that\ continually\ displays\ the\ Scribbler's\ sensor\ values.\ \ The\ values\ are\ updated\ every\ .25\n\ seconds.\n\ <p><p>\n\ Only\ one\ senses\ window\ is\ permitted\ to\ be\ opened\ for\ a\ particular\ Scribbler;\ no\ action\ occurs\ if\ this\ method\n\ is\ invoked\ when\ a\ senses\ window\ is\ already\ opened.\ \ The\ window\ will\ stay\ opened\ until\ the\ user\ closes\ it\n\ (by\ clicking\ the\ window's\ close\ icon)\ or\ the\ {@link\ \#close\ close}\ method\ is\ invoked.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n
comment2.params=
comment2.target=void\ close()
comment2.text=\n\ Close\ the\ connection\ between\ the\ computer\ and\ the\ Scribbler.\ \ Any\ threads\ associated\ with\ this\ robot\n\ (e.g.,\ senses,\ joystick)\ will\ be\ killed.\ \ After\ calling\ close\ the\ Scribbler\ cannot\ be\n\ accessed\ again\ unless\ {@link\ \#connect\ connect}\ is\ called\ to\ reestablish\ the\ connection.\ \ \n
comment20.params=
comment20.target=void\ joyStick()
comment20.text=\n\ Opens\ a\ window\ that\ permits\ the\ user\ to\ control\ the\ movement\ of\ the\ Scribbler.\ \ The\ window\ allows\ the\ user\n\ to\ control\ the\ scribbler\ using\ a\ joystick-like\ interface,\ permitting\ forward,\ backward,\ right,\ and\ left\n\ movement.\n\ <p><p>\n\ Only\ one\ joystick\ window\ is\ permitted\ to\ be\ opened\ for\ a\ particular\ Scribbler;\ no\ action\ occurs\ if\n\ this\ method\ is\ invoked\ when\ a\ joystick\ window\ is\ already\ opened.\ \ The\ window\ will\ stay\ opened\ until\ the\ user\n\ closes\ it\ (by\ clicking\ the\ window's\ close\ icon)\ or\ the\ {@link\ \#close\ close}\ method\ is\ invoked.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n
comment21.params=translate\ rotate
comment21.target=void\ move(double,\ double)
comment21.text=\n\ Starts\ the\ Scribbler\ moving\ in\ the\ specified\ direction.\ \n\ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ and\ translate\ and\ rotate\ are\ both\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ translate\ Specifies\ the\ forward\ movement\ speed.\ \ Values\ >\ 0\ specify\ forward\ speed\ (with\ 1.0\ specifying\n\ full\ forward\ speed),\ values\ &lt;\ 0\ specify\ backward\ speed\ (with\ -1.0\ specifying\ full\ backward\ speed).\ \ 0\n\ specifies\ no\ forward\ or\ backward\ speed.\n\ \n\ @param\ rotate\ Specifies\ rotational\ speed.\ \ Values\ >\ 0\ specify\ counterclockwise\ rotation\ (with\ 1.0\ specifying\n\ full\ counterclockwise\ rotation),\ values\ &lt;\ 0\ specify\ clockwise\ rotation\ (with\ -1.0\ specifying\ full\n\ clockwise\ rotation).\ \ 0\ specifies\ no\ rotation\ at\ all.\n
comment22.params=speed\ numSeconds
comment22.target=void\ forward(double,\ double)
comment22.text=\n\ Moves\ the\ Scribbler\ in\ a\ forward\ direction\ at\ a\ specified\ speed\ with\ no\ rotational\ movement\ for\ a\ specified\n\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\ method\ will\n\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ forward\ speed.\ \ Positive\ values\ specify\ forward\ movement\ (1.0\ is\ full\ forward\ speed),\n\ negative\ values\ specify\ backward\ movement\ (-1.0\ is\ full\ backward\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment23.params=speed
comment23.target=void\ forward(double)
comment23.text=\n\ Starts\ the\ Scribbler\ moving\ forward\ at\ a\ specified\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\n\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ speed.\ \ Positive\ values\ specify\ forward\ movement\ (1.0\ is\ full\ forward\ speed),\n\ negative\ values\ specify\ backward\ movement\ (-1.0\ is\ full\ backward\ speed).\n\ \n
comment24.params=
comment24.target=void\ forward()
comment24.text=\n\ Starts\ the\ Scribbler\ moving\ forward\ at\ full\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\ continue\ to\n\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ {@link\ \#turnRight\ turnRight},\n\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n
comment25.params=
comment25.target=void\ stop()
comment25.text=\n\ Causes\ the\ Scribbler\ to\ stop\ moving.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n
comment26.params=speed\ numSeconds
comment26.target=void\ backward(double,\ double)
comment26.text=\n\ Moves\ the\ Scribbler\ in\ a\ backward\ direction\ at\ a\ specified\ speed\ with\ no\ rotational\ movement\ for\ a\ specified\n\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\ method\ will\n\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ backward\ speed.\ \ Positive\ values\ specify\ backward\ movement\ (1.0\ is\ full\ backward\n\ speed),\ negative\ values\ specify\ forward\ movement\ (-1.0\ is\ full\ forward\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment27.params=speed
comment27.target=void\ backward(double)
comment27.text=\n\ Starts\ the\ Scribbler\ moving\ backward\ at\ a\ specified\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\n\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ speed.\ \ Positive\ values\ specify\ backward\ movement\ (1.0\ is\ full\ backward\ speed),\n\ negative\ values\ specify\ forward\ movement\ (-1.0\ is\ full\ forward\ speed).\n\ \n
comment28.params=
comment28.target=void\ backward()
comment28.text=\n\ Starts\ the\ Scribbler\ moving\ backward\ at\ full\ speed\ with\ no\ rotational\ movement.\ \ The\ Scribbler\ will\ continue\ to\n\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n
comment29.params=speed\ numSeconds
comment29.target=void\ turnLeft(double,\ double)
comment29.text=\n\ Moves\ the\ Scribbler\ in\ a\ counterclockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement\n\ for\ a\ specified\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\n\ method\ will\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ counterclockwise\ rotation\ \n\ (1.0\ is\ full\ counterclockwise\ speed),\n\ negative\ values\ specify\ clockwise\ rotation\ (-1.0\ is\ full\ clockwise\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment3.params=
comment3.target=boolean\ isConnected()
comment3.text=\n\ Returns\ whether\ the\ scribbler\ is\ currently\ connected.\n\ \n\ @return\ true\ iff\ the\ Scribbler\ is\ currently\ connected\n\ \n
comment30.params=speed
comment30.target=void\ turnLeft(double)
comment30.text=\n\ Moves\ the\ Scribbler\ in\ a\ counterclockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement.\n\ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ counterclockwise\ rotation\ (1.0\ is\ full\n\ counterclockwise\ speed),\ negative\ values\ specify\ clockwise\ rotation\ (-1.0\ is\ full\ clockwise\ speed).\n\ \n
comment31.params=
comment31.target=void\ turnLeft()
comment31.text=\n\ Moves\ the\ Scribbler\ in\ a\ counterclockwise\ rotation\ at\ full\ speed\ with\ no\ forward\ or\ backward\ movement.\n\ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n
comment32.params=speed\ numSeconds
comment32.target=void\ turnRight(double,\ double)
comment32.text=\n\ Moves\ the\ Scribbler\ in\ a\ clockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement\n\ for\ a\ specified\ amount\ of\ time.\ \ The\ Scribbler\ will\ stop\ moving\ at\ the\ end\ of\ the\ specified\ time\ period.\ \ This\n\ method\ will\ not\ return\ until\ the\ specified\ time\ period\ has\ occurred.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive),\ numSeconds\ >\ 0.0\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ clockwise\ rotation\ (1.0\ is\ full\n\ clockwise\ speed),\ negative\ values\ specify\ counterclockwise\ rotation\ (-1.0\ is\ full\ counterclockwise\ speed).\n\ \n\ @param\ numSeconds\ Specifies\ the\ length\ of\ time\ to\ move,\ in\ seconds.\n
comment33.params=speed
comment33.target=void\ turnRight(double)
comment33.text=\n\ Moves\ the\ Scribbler\ in\ a\ clockwise\ rotation\ at\ a\ specified\ speed\ with\ no\ forward\ or\ backward\ movement.\ The\n\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ clockwise\ rotation\ \n\ (1.0\ is\ full\ clockwise\ speed),\n\ negative\ values\ specify\ counterclockwise\ rotation\ (-1.0\ is\ full\ counterclockwise\ speed).\n\ \n
comment34.params=
comment34.target=void\ turnRight()
comment34.text=\n\ Moves\ the\ Scribbler\ in\ a\ clockwise\ rotation\ at\ full\ speed\ with\ no\ forward\ or\ backward\ movement.\ \ The\ Scribbler\n\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\n\ \n
comment35.params=left\ right
comment35.target=void\ motors(double,\ double)
comment35.text=\n\ Starts\ the\ Scribbler\ moving\ by\ specifying\ the\ amount\ of\ power\ going\ to\ each\ wheel.\ The\ Scribbler\ will\ continue\n\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\n\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected,\ and\ left\ and\ right\ are\ both\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ left\ Specifies\ the\ speed\ of\ the\ left\ wheel.\ \ Values\ >\ 0\ specify\ forward\ speed\ (with\ 1.0\ specifying\n\ full\ forward\ speed),\ values\ &lt;\ 0\ specify\ backward\ speed\ (with\ -1.0\ specifying\ full\ backward\ speed).\ \ 0\n\ specifies\ no\ forward\ or\ backward\ speed.\n\ \n\ @param\ right\ Specifies\ the\ speed\ of\ the\ right\ wheel.\ \ Values\ >\ 0\ specify\ forward\ speed\ (with\ 1.0\ specifying\n\ full\ forward\ speed),\ values\ &lt;\ 0\ specify\ backward\ speed\ (with\ -1.0\ specifying\ full\ backward\ speed).\ \ 0\n\ specifies\ no\ forward\ or\ backward\ speed.\n
comment36.params=speed
comment36.target=void\ translate(double)
comment36.text=\n\ Starts\ the\ Scribbler\ moving\ forward\ or\ backward\ at\ a\ specified\ speed\ without\ changing\ the\ Scribbler's\ current\ \n\ rotational\ movement.\ \ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\n\ (e.g.,\ {@link\ \#stop\ stop},\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\n\ {@link\ \#turnLeft\ turnLeft},\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\n\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ speed.\ \ Positive\ values\ specify\ forward\ movement\ (1.0\ is\ full\ forward\ speed),\n\ negative\ values\ specify\ backward\ movement\ (-1.0\ is\ full\ backward\ speed).\n\ \n
comment37.params=speed
comment37.target=void\ rotate(double)
comment37.text=\n\ Starts\ the\ Scribbler\ rotating\ at\ a\ specified\ speed\ without\ changing\ the\ Scribbler's\ current\ forward\ or\ backward\n\ movement.\ \ The\ Scribbler\ will\ continue\ to\ move\ until\ another\ movement\ method\ is\ invoked\ (e.g.,\ {@link\ \#stop\ stop},\ \n\ {@link\ \#move\ move},\ {@link\ \#forward\ forward},\ {@link\ \#backward\ backward},\ {@link\ \#turnLeft\ turnLeft},\ \n\ {@link\ \#turnRight\ turnRight},\ {@link\ \#motors\ motors},\ {@link\ \#translate\ translate},\ {@link\ \#rotate\ rotate}\ ).\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected\ and\ speed\ between\ -1.0\ (inclusive)\ and\ 1.0\ (inclusive)\n\ \n\ @param\ speed\ Specifies\ the\ rotational\ speed.\ \ Positive\ values\ specify\ counterclockwise\ rotation\ (1.0\ is\ full\n\ counterclockwise\ speed),\ negative\ values\ specify\ clockwise\ rotation\ (-1.0\ is\ full\ clockwise\ speed).\n\ \n
comment38.params=messageString
comment38.target=void\ _write(int[])
comment38.text=\n\ Send\ the\ values\ contained\ in\ messageString\ to\ the\ Scribbler.\ \ If\ the\ message\ has\ less\ than\ 9\ values\ then\n\ it\ is\ padded\ with\ zeros\ so\ that\ a\ 9-byte\ message\ is\ sent.\ \ It\ is\ assumed\ that\ the\ values\ in\ messageString\n\ are\ all\ between\ 0\ and\ 255.\n
comment39.params=numBytes
comment39.target=int[]\ _read(int)
comment39.text=\n\ Read\ numBytes\ from\ the\ Scribbler\ and\ return\ an\ array\ containing\ these\ values.\ \ The\ returned\ values\ will\ all\n\ be\ between\ 0\ and\ 255.\n
comment4.params=
comment4.target=void\ reset()
comment4.text=\n\ resets\ the\ Scribbler.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n
comment40.params=
comment40.target=int[]\ _readLine()
comment40.text=\n\ Read\ bytes\ from\ the\ Scribbler\ until\ an\ eol\ (ASCII\ 10,\ line\ feed)\ character\ is\ encountered.\ \ The\ values\n\ read\ (not\ including\ the\ eol)\ will\ be\ returned\ in\ the\ array.\ \ All\ values\ in\ the\ array\ will\ be\ between\n\ 0\ and\ 255.\n
comment41.params=
comment41.target=void\ _flushInput()
comment41.text=\n\ Read\ any\ remaining\ data\ from\ the\ Scribbler\ and\ throw\ them\ out.\n
comment42.params=translate\ rotate
comment42.target=void\ _adjustSpeed(double,\ double)
comment42.text=\n\ Set\ the\ Scribbler\ motors\ so\ the\ robot\ is\ moving\ in\ the\ specified\ direction.\n
comment43.params=command
comment43.target=void\ _set(int)
comment43.text=\n\ Send\ one\ of\ the\ parameterless\ set\ commands\ to\ the\ Scribbler.\ \ Parameter\ command\ contains\ the\ opcode.\ \ The\n\ command\ echo\ from\ the\ Scribbler\ is\ read\ and\ a\ sanity\ check\ is\ performed\ on\ the\ echo.The\ 11\ byte\ response\ is\n\ also\ read\ from\ the\ Scribbler\ and\ stored\ in\ instance\ field\ _lastSensors.\ \ Only\ one\ thread\ can\ can\ communicate\ \n\ with\ the\ Scribbler\ at\ a\ time.\n
comment44.params=command\ value1\ value2
comment44.target=void\ _set(int,\ int,\ int)
comment44.text=\n\ Send\ one\ of\ the\ two\ parameter\ set\ commands\ to\ the\ Scribbler.\ \ The\ command\ opcode\ and\ the\ two\ parameters\n\ are\ passed\ to\ this\ method.\ \ The\ command\ echo\ is\ read\ from\ the\ Scribbler\ and\ a\ sanity\ check\ is\ performed\ on\n\ the\ echo.\ \ The\ 11\ byte\ response\ is\ also\ read\ from\ the\ Scribbler\ and\ stored\ in\ instance\ field\ _lastSensors.\n\ Only\ one\ thread\ can\ can\ communicate\ with\ the\ Scribbler\ at\ a\ time.\n
comment45.params=command\ values
comment45.target=void\ _set(int,\ int[])
comment45.text=\n\ Send\ one\ of\ the\ set\ commands\ to\ the\ Scribbler.\ \ The\ command\ opcode\ is\ passed\ to\ the\ method,\ and\ parameters\ to\n\ the\ command,\ if\ any,\ are\ contained\ in\ an\ array\ also\ passed\ to\ the\ method.\ \ The\ command\ echo\ is\ read\ from\ the\n\ Scribbler\ and\ a\ sanity\ check\ is\ performed\ on\ the\ echo.\ \ The\ 11\ byte\ response\ is\ also\ read\ from\ the\ Scribbler\n\ and\ stored\ in\ instance\ field\ _lastSensors.\ \ Only\ one\ thread\ can\ can\ communicate\ with\ the\ Scribbler\ at\ a\ time.\n
comment46.params=
comment46.target=int[]\ _getAll()
comment46.text=\n\ Send\ a\ get_all\ command\ to\ the\ Scribbler\ and\ store\ the\ data\ received\ in\ instance\ field\ _lastSensors.\ \ Only\ one\n\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Scribbler.\n
comment47.params=command\ numResponseBytes
comment47.target=int[]\ _get(int,\ int)
comment47.text=\n\ Send\ a\ get\ command\ to\ the\ Scribbler\ that\ expects\ a\ fixed-size\ response.\ \ The\ command\ opcode\ is\ passed\ to\ this\n\ method\ as\ well\ as\ the\ number\ of\ bytes\ expected\ in\ the\ Scribbler's\ response.\ \ The\ command\ echo\ is\ read\ from\ the\n\ Scribbler\ and\ a\ sanity\ check\ is\ performed\ on\ the\ echo.\ \ If\ there\ are\ response\ bytes\ expected\ they\ are\ read\ and\n\ stored\ in\ an\ array\ that\ is\ returned\ to\ the\ invoker.\ \ Only\ one\ thread\ at\ a\ time\ can\ communicate\ with\ the\n\ Scribbler.\n
comment48.params=command
comment48.target=int[]\ _getLine(int)
comment48.text=\n\ Send\ a\ get\ command\ to\ the\ Scribbler\ that\ expects\ a\ response\ terminted\ by\ eol.\ \ The\ command\ opcode\ is\ passed\n\ to\ this\ method.\ \ The\ command\ echo\ is\ read\ from\ the\ Scribbler\ and\ a\ sanity\ check\ performed\ on\ the\ echo.\ \ The\n\ eol-terminate\ response\ is\ read\ from\ the\ Scribbler\ and\ returned\ (without\ the\ eol)\ to\ the\ caller.\ \ Only\ one\n\ thread\ at\ a\ time\ can\ communicate\ with\ the\ Scribbler.\n
comment49.params=message\ echo
comment49.target=boolean\ _checkEcho(int[],\ int[])
comment49.text=\n\ Compare\ the\ echo\ with\ the\ original\ message.\ \ If\ there\ are\ differences\ print\ a\ message.\n\ \n\ @return\ true\ iff\ the\ original\ message\ and\ echo\ are\ the\ same.\n
comment5.params=
comment5.target=boolean\ getStall()
comment5.text=\n\ Returns\ whether\ the\ Scribbler\ has\ stalled\ (i.e.,\ stopped\ moving).\ \ Returns\ true\ iff\ the\ Scribbler\ has\ stalled.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n
comment50.params=numSeconds
comment50.target=void\ _wait(double)
comment50.text=\n\ Cause\ the\ current\ thread\ to\ sleep\ for\ numSeconds.\ \ This\ method\ was\ originally\ a\ Myro\ method,\ but\ since\ the\n\ actions\ of\ this\ are\ implemented\ by\ the\ computer\ (as\ opposed\ to\ the\ Scribbler)\ I\ decided\ to\ make\ it\ a\ \n\ private\ method\ used\ only\ by\ the\ implementation\ of\ myro.\ \ Programmers\ should\ use\ java's\ Thread.sleep\ method\n\ directly.\n
comment6.params=whichLight
comment6.target=int\ getLight(int)
comment6.text=\n\ Returns\ the\ state\ of\ one\ of\ the\ Scribbler's\ light\ sensors.\ \ whichLight\ specifies\ the\ light\ sensor\ to\ query.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\ and\ whichLight\ is\ {@link\ \#SENSOR_LIGHT_LEFT\ SENSOR_LIGHT_LEFT}\ (or\ 0),\ \n\ {@link\ \#SENSOR_LIGHT_CENTER\ SENSOR_LIGHT_CENTER}\ (or\ 1),\ or\ {@link\ \#SENSOR_LIGHT_RIGHT\ SENSOR_LIGHT_RIGHT}\ (or\ 2).\n\ \n\ @param\ whichLight\ Specifies\ the\ light\ sensor\ to\ query.\ \ Should\ be\ {@link\ \#SENSOR_LIGHT_LEFT\ SENSOR_LIGHT_LEFT}\ (or\ 0),\ \n\ {@link\ \#SENSOR_LIGHT_CENTER\ SENSOR_LIGHT_CENTER}\ (or\ 1),\ or\ {@link\ \#SENSOR_LIGHT_RIGHT\ SENSOR_LIGHT_RIGHT}\ (or\ 2).\n\ \n\ @return\ The\ value\ of\ the\ selected\ light\ sensor.\ \ The\ value\ will\ be\ non-negative,\ and\ a\ low\ value\ indicates\n\ bright\ light,\ a\ high\ value\ indicates\ low\ light.\n
comment7.params=
comment7.target=int[]\ getLight()
comment7.text=\n\ Returns\ the\ state\ of\ all\ three\ Scribbler\ light\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n\ \n\ @return\ A\ three\ element\ array.\ \ element\ 0\ contains\ the\ value\ of\ the\ left\ sensor,\ element\ 1\ contains\ the\ value\n\ of\ the\ center\ sensor,\ and\ element\ 2\ contains\ the\ value\ of\ the\ right\ sensor.\ \ All\ values\ are\ non-negative,\n\ and\ low\ values\ indicate\ bright\ light,\ high\ values\ indicate\ low\ light.\n
comment8.params=whichIR
comment8.target=boolean\ getIR(int)
comment8.text=\n\ Returns\ the\ state\ of\ one\ of\ the\ Scribbler's\ IR\ sensors.\ \ whichIR\ specifies\ the\ IR\ sensor\ to\ query.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\ and\ whichIR\ is\ {@link\ \#SENSOR_IR_LEFT\ SENSOR_IR_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_IR_RIGHT\ SENSOR_IR_RIGHT}\ (or\ 1).\n\ \n\ @param\ whichIR\ Specifies\ the\ IR\ sensor\ to\ query.\ \ Should\ be\ {@link\ \#SENSOR_IR_LEFT\ SENSOR_IR_LEFT}\ (or\ 0)\n\ \ or\ {@link\ \#SENSOR_IR_RIGHT\ SENSOR_IR_RIGHT}\ (or\ 1).\n\ \n\ @return\ The\ value\ of\ the\ selected\ IR\ sensor.\ True\ means\ that\ an\ obstacle\ is\ NOT\ detected\ by\ the\ selected\n\ IR\ sensor,\ and\ false\ means\ that\ an\ obstacle\ IS\ detected\ by\ the\ sensor.\n
comment9.params=
comment9.target=boolean[]\ getIR()
comment9.text=\n\ Returns\ the\ state\ of\ both\ of\ the\ Scribbler's\ IR\ sensors.\n\ <p><p>\n\ <b>Precondition\:</b>\ isConnected()\n\ \n\ @return\ A\ two\ element\ boolean\ array\ containing\ the\ values\ of\ the\ IR\ sensort.\ True\ means\ that\ an\ obstacle\ is\n\ NOT\ detected\ by\ the\ selected\ IR\ sensor,\ and\ false\ means\ that\ an\ obstacle\ IS\ detected\ by\ the\ sensor.\n
numComments=51
