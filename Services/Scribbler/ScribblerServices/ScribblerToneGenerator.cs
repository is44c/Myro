//------------------------------------------------------------------------------
// ToneGenerator.cs
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------
#if false
using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;

using tone = IPREGenericContracts.ToneGenerator.Proxy;
using brick = IPRE.ScribblerBase.Proxy;

namespace IPRE.ToneGenerator
{
    public static class Contract
    {
        public const string Identifier = "http://www.roboteducation.org/scribblertonegenerator.html";
    }

    /// <summary>
    /// The Tone Generator Service
    /// </summary>
    [DisplayName("Scribbler Tone Generator")]
    [Description("The Scribbler ToneGenerator Service")]
    [Contract(Contract.Identifier)]
    [AlternateContract(tone.Contract.Identifier)] //implementing the generic contract
    public class ScribblerToneGenerator : DsspServiceBase
    {
        /// <summary>
        /// _state
        /// </summary>
        private tone.ToneGeneratorState _state = new tone.ToneGeneratorState();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("ToneGenerator", AllowMultipleInstances=false)]
        private tone.ToneGeneratorOperations _mainPort = new tone.ToneGeneratorOperations();

        [Partner("ScribblerBase",
    Contract = brick.Contract.Identifier,
    CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate,
    Optional = false)]
        private brick.ScribblerOperations _scribblerPort = new brick.ScribblerOperations();


        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ScribblerToneGenerator(DsspServiceCreationPort creationPort)
            : base(creationPort)
        {
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
        }

        /// <summary>
        /// Get Handler
        /// </summary>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(tone.Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }


        /// <summary>
        /// PlayTone Handler
        /// </summary>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> PlayToneHandler(tone.PlayTone request)
        {
            if (request.Body.Frequency < 0 || request.Body.Duration < 0)
            {
                LogError("Improper PlayTone Frequency or Duration");
                request.ResponsePort.Post(new Fault());
                yield break;
            }

            brick.PlayToneBody play = new brick.PlayToneBody();
            play.Frequency1 = request.Body.Frequency;
            play.Frequency2 = 0;
            play.Duration = request.Body.Duration;

            Activate(Arbiter.Choice(_scribblerPort.PlayTone(play),
                delegate(DefaultUpdateResponseType response)
                {
                    request.ResponsePort.Post(DefaultUpdateResponseType.Instance);
                },
                delegate(Fault fault)
                {
                    request.ResponsePort.Post(new Fault());
                }
            ));

            yield break;
        }

        /// <summary>
        /// PlayTone2 Handler
        /// </summary>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> PlayTone2Handler(tone.PlayTone2 request)
        {
            if (request.Body.Frequency1 < 0 || request.Body.Frequency2 < 0 || request.Body.Duration < 0)
            {
                LogError("Improper PlayTone2 Frequency or Duration");
                request.ResponsePort.Post(new Fault());
                yield break;
            }

            brick.PlayToneBody play = new brick.PlayToneBody();
            play.Frequency1 = request.Body.Frequency1;
            play.Frequency2 = request.Body.Frequency2;
            play.Duration = request.Body.Duration;

            Activate(Arbiter.Choice(_scribblerPort.PlayTone(play),
                delegate(DefaultUpdateResponseType response)
                {
                    request.ResponsePort.Post(DefaultUpdateResponseType.Instance);
                },
                delegate(Fault fault)
                {
                    request.ResponsePort.Post(new Fault());
                }
            ));

            yield break;
        }

    }
}
#endif