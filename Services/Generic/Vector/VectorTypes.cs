//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.Core.DsspHttp;
using System;
using System.Linq;
using System.Collections.Generic;
using W3C.Soap;

namespace Myro.Services.Generic.Vector
{
    /// <summary>
    /// Vector Contract class
    /// </summary>
    public sealed class Contract
    {

        /// <summary>
        /// The Dss Service contract
        /// </summary>
        [DataMember()]
        public const String Identifier = "http://schemas.tempuri.org/2008/06/vector.html";
    }

    /// <summary>
    /// The Vector State
    /// </summary>
    [DataContract()]
    public class VectorState
    {
        [DataMember()]
        public List<double> Values { get; set; }
        [DataMember()]
        public List<string> Tags { get; set; }
        [DataMember()]
        public DateTime Timestamp { get; set; }
        [DataMember()]
        public DateTime TagTimestamp { get; set; }
        public VectorState()
            : this(null, null, DateTime.Now)
        {
        }
        public VectorState(List<Double> values, DateTime timestamp)
            : this(values, null, timestamp)
        {
        }
        public VectorState(List<Double> values)
            : this(values, null, DateTime.Now)
        {
        }
        public VectorState(bool[] values, DateTime timestamp)
        {
            List<double> ret = new List<double>(values.Length);
            foreach (bool v in values)
                ret.Add(v ? 1.0 : 0.0);
            Values = ret;
            Tags = new List<string>();
            Timestamp = timestamp;
            TagTimestamp = DateTime.Now;
        }
        public VectorState(List<double> values, List<string> tags, DateTime timestamp)
        {
            Values = (values == null ? new List<double>() : values);
            Tags = (tags == null ? new List<string>() : tags);
            Timestamp = (timestamp == null ? DateTime.Now : timestamp);
            TagTimestamp = DateTime.Now;
        }
        public void setValues(double[] values, DateTime timestamp)
        {
            Values = new List<double>(values);
            Timestamp = timestamp;
        }
        public void setValues(bool[] values, DateTime timestamp)
        {
            Values = new List<double>(values.Length);
            foreach (bool v in values)
                Values.Add(v ? 1.0 : 0.0);
            Timestamp = timestamp;
        }
        public IEnumerable<bool> getValuesBool()
        {
            return
                from v in Values
                select (v >= 0.5 ? true : false);
        }
    }

    /// <summary>
    /// Vector Main Operations Port
    /// </summary>
    [ServicePort()]
    public class VectorOperations : PortSet<DsspDefaultLookup, DsspDefaultDrop, HttpGet, Get, Replace, Set, SetAll, Subscribe>
    {
    }

    /// <summary>
    /// Vector Get Operation
    /// </summary>
    public class Get : Get<GetRequestType, PortSet<VectorState, Fault>>
    {
        public Get()
            : base()
        {
        }

        public Get(GetRequestType body) :
            base(body)
        {
        }

        public Get(GetRequestType body, PortSet<VectorState, Fault> responsePort) :
            base(body, responsePort)
        {
        }
    }

    public class Subscribe : Subscribe<SubscribeRequestType, DsspResponsePort<SubscribeResponseType>>
    {
        public Subscribe()
            : base()
        {
        }
        public Subscribe(SubscribeRequestType body)
            : base(body)
        {
        }
        public Subscribe(SubscribeRequestType body, DsspResponsePort<SubscribeResponseType> responsePort)
            : base(body, responsePort)
        {
        }
    }

    public class Replace : Replace<VectorState, DsspResponsePort<DefaultReplaceResponseType>>
    {
        public Replace()
            : base()
        {
        }
        public Replace(VectorState body)
            : base(body)
        {
        }
        public Replace(VectorState body, DsspResponsePort<DefaultReplaceResponseType> responsePort)
            : base(body, responsePort)
        {
        }
    }

    public class SetRequestType
    {
        public int Index { get; private set; }
        public double Value { get; private set; }
        public DateTime Timestamp { get; private set; }
        public SetRequestType()
            : this(0, 0.0, DateTime.Now)
        {
        }
        public SetRequestType(int index, double value, DateTime timestamp)
        {
            Index = index;
            Value = value;
            Timestamp = timestamp;
        }
        public SetRequestType(int index, double value)
            : this(index, value, DateTime.Now)
        {
        }
    }

    public class Set : Replace<SetRequestType, DsspResponsePort<DefaultReplaceResponseType>>
    {
        public Set()
            : base()
        {
        }
        public Set(SetRequestType body)
            : base(body)
        {
        }
        public Set(int index, double value)
            : base(new SetRequestType(index, value))
        {
        }
        public Set(int index, double value, DateTime timestamp)
            : base(new SetRequestType(index, value, timestamp))
        {
        }
        public Set(SetRequestType body, DsspResponsePort<DefaultReplaceResponseType> responsePort)
            : base(body, responsePort)
        {
        }
    }

    public class SetAllRequestType
    {
        public List<double> Values { get; private set; }
        public DateTime Timestamp { get; private set; }
        public SetAllRequestType()
            : this(null, DateTime.Now)
        {
        }
        public SetAllRequestType(List<double> values, DateTime timestamp)
        {
            Values = values;
            Timestamp = timestamp;
        }
        public SetAllRequestType(List<double> values)
            : this(values, DateTime.Now)
        {
        }
    }

    public class SetAll : Replace<SetAllRequestType, DsspResponsePort<DefaultReplaceResponseType>>
    {
        public SetAll()
            : base()
        {
        }
        public SetAll(SetAllRequestType body)
            : base(body)
        {
        }
        public SetAll(List<double> values)
            : base(new SetAllRequestType(values))
        {
        }
        public SetAll(List<double> values, DateTime timestamp)
            : base(new SetAllRequestType(values, timestamp))
        {
        }
        public SetAll(SetAllRequestType body, DsspResponsePort<DefaultReplaceResponseType> responsePort)
            : base(body, responsePort)
        {
        }
    }

}
