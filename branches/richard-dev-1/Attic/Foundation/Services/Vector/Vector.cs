//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using submgr = Microsoft.Dss.Services.SubscriptionManager;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;

namespace Myro.Services.Generic.Vector
{
    /// <summary>
    /// Implementation class for Vector
    /// </summary>
    [DisplayName("Vector")]
    [Description("A Generic Vector Service")]
    [Contract(Contract.Identifier)]
    public class VectorService : DsspServiceBase
    {

        /// <summary>
        /// _state
        /// </summary>
        [ServiceState()]
        protected VectorState _state = new VectorState();

        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/vector", AllowMultipleInstances = false)]
        protected VectorOperations _mainPort = new VectorOperations();

        [Partner("SubMgr",
            Contract = submgr.Contract.Identifier,
            CreationPolicy = PartnerCreationPolicy.CreateAlways,
            Optional = false)]
        protected submgr.SubscriptionManagerPort _subMgrPort = new submgr.SubscriptionManagerPort();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public VectorService(DsspServiceCreationPort creationPort) :
            base(creationPort)
        {
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            base.Start();
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> ReplaceHandler(Replace replace)
        {
            _state = replace.Body;
            base.SendNotification<Replace>(_subMgrPort, replace);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> SetHandler(Set set)
        {
            _state.Values[set.Body.Index] = set.Body.Value;
            _state.Timestamp = set.Body.Timestamp;
            base.SendNotification<Set>(_subMgrPort, set);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> SetAllHandler(SetAll setAll)
        {
            _state.Values = setAll.Body.Values;
            _state.Timestamp = setAll.Body.Timestamp;
            base.SendNotification<SetAll>(_subMgrPort, setAll);
            yield break;
        }

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> SubscribeHandler(Subscribe subscribe)
        {
            yield return Arbiter.Choice(
                SubscribeHelper(_subMgrPort, subscribe.Body, subscribe.ResponsePort),
                delegate(SuccessResult success)
                {
                    base.SendNotification<Replace>(_subMgrPort, subscribe.Body.Subscriber, _state);
                },
                delegate(Exception error)
                {
                    base.LogError("Error adding subscriber " + subscribe.Body.Subscriber, error);
                });
        }

    }
}
