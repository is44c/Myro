//------------------------------------------------------------------------------
// ToneGenerator.cs
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using Myro.Utilities;

using brick = Myro.Services.Scribbler.ScribblerBase.Proxy;
using vector = Myro.Services.Generic.Vector;

namespace Myro.Services.Scribbler.ToneGenerator
{
    public static class Contract
    {
        public const string Identifier = "http://www.roboteducation.org/scribblertonegenerator.html";
    }

    /// <summary>
    /// The Tone Generator Service
    /// </summary>
    [DisplayName("Scribbler Tone Generator")]
    [Description("The Scribbler ToneGenerator Service")]
    [Contract(Contract.Identifier)]
    [AlternateContract(vector.Contract.Identifier)] //implementing the generic contract
    public class ScribblerToneGenerator : vector.VectorService
    {
        [Partner("ScribblerBase",
            Contract = brick.Contract.Identifier,
            CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate,
            Optional = false)]
        private brick.ScribblerOperations _scribblerPort = new brick.ScribblerOperations();


        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ScribblerToneGenerator(DsspServiceCreationPort creationPort)
            : base(creationPort)
        {
            _state = new vector.VectorState(
                new List<double> { 0.0, 0.0, 0.0 },
                new List<string> { "tone1", "tone2", "duration" },
                DateTime.Now);
        }

        protected override void SetCallback(Myro.Services.Generic.Vector.SetRequestInfo request)
        {
            playTone();
        }

        private void playTone()
        {
            brick.PlayToneBody play = new brick.PlayToneBody()
            {
                Frequency1 = (int)Math.Round(_state.Values[0]),
                Frequency2 = (int)Math.Round(_state.Values[1]),
                Duration = (int)Math.Round(_state.Values[2])
            };
            if (play.Frequency1 < 0 || play.Frequency2 < 0 || play.Duration < 0)
                throw new ArgumentOutOfRangeException();
            else
                RSUtils.RecieveSync<DefaultUpdateResponseType>(_scribblerPort.PlayTone(play), Myro.Utilities.Params.defaultRecieveTimeout);
        }
    }
}
