//------------------------------------------------------------------------------
// ScribblerState.cs
//
//     This code was generated by the DssNewService tool.
//
//      Ben Axelrod 08/28/2006
//
//------------------------------------------------------------------------------
using Microsoft.Ccr.Core;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using W3C.Soap;


namespace IPRE.ScribblerBase
{

    /// <summary>
    /// Main state of service
    /// </summary>
    [DataContract()]
    public class ScribblerState
    {
        [DataMember]
        public bool IRLeft;

        [DataMember]
        public bool IRRight;

        [DataMember]
        public bool LineLeft;

        [DataMember]
        public bool LineRight;

        [DataMember]
        public bool Stall;

        [DataMember]
        public int LightLeft;

        [DataMember]
        public int LightRight;

        [DataMember]
        public int LightCenter;

        [DataMember]
        public int MotorLeft;

        [DataMember]
        public int MotorRight;

        [DataMember]
        public bool LEDLeft;
        
        [DataMember]
        public bool LEDRight;
       
        [DataMember]
        public bool LEDCenter;
    }

    /// <summary>
    /// Custom subscriptions
    /// IRLeft, IRRight, LineLeft, LineRight, Stall, LightLeft, LightRight, LightCenter, Motors
    /// </summary>
    [DataContract]
    public class MySubscribeRequestType : SubscribeRequestType
    {
        //The list of sensors to subscribe to
        [DataMember]
        public List<string> Sensors;
    }


    /// <summary>
    /// An array of bytes to send to Scribbler
    /// </summary>
    [DataContract]
    public class ScribblerCommand
    {
        private byte[] _data;

        [DataMember]
        public byte[] Data
        {
            get { return _data; }
            set { _data = value; }
        }

        public ScribblerCommand()
        { }
        public ScribblerCommand(byte command)
        {
            _data = new byte[1];
            _data[0] = command;
        }
        public ScribblerCommand(byte command, byte data1)
        {
            _data = new byte[2];
            _data[0] = command;
            _data[1] = data1;
        }
        public ScribblerCommand(byte command, byte data1, byte data2)
        {
            _data = new byte[3];
            _data[0] = command;
            _data[1] = data1;
            _data[2] = data2;
        }
        public ScribblerCommand(byte command, byte data1, byte data2, byte data3)
        {
            _data = new byte[4];
            _data[0] = command;
            _data[1] = data1;
            _data[2] = data2;
            _data[3] = data3;
        }
    }


    /// <summary>
    /// A 2 byte array sensor response from scribbler
    /// </summary>
    [DataContract()]
    public class SensorNotification
    {
        [DataMember]
        public int Sensor;

        [DataMember]
        public int Status;

        public SensorNotification() { }
        public SensorNotification(int sensor, int status)
        {
            this.Sensor = sensor;
            this.Status = status;
        }
    }

    /// <summary>
    /// motor command data
    /// </summary>
    [DataContract()]
    public class SetMotorData
    {
        /// <summary>
        /// should contain "LEFT" or "RIGHT"
        /// </summary>
        [DataMember]
        public string Motor;

        /// <summary>
        /// 0 for full speed backwards, 100 = stopped, 200 = full speed forwards
        /// </summary>
        [DataMember]
        public int Speed;
    }

    [DataContract]
    public class LEDMessage
    {
        /// <summary>
        /// which LED to set (0, 1, 2)
        /// </summary>
        [DataMember]
        public int LED;

        /// <summary>
        /// State to set LED to
        /// </summary>
        [DataMember]
        public bool State;
    }

    [DataContract]
    public class PingMessage
    { }

    [DataContract]
    public class PlayToneMessage
    {
        /// <summary>
        /// units: ms
        /// </summary>
        [DataMember]
        public int Duration;

        /// <summary>
        /// units: Hz
        /// </summary>
        [DataMember]
        public int Frequency1;

        /// <summary>
        /// units: Hz
        /// </summary>
        [DataMember]
        public int Frequency2;
    }

}
