//------------------------------------------------------------------------------
// Scribbler Motor Service
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Security.Permissions;
using xml = System.Xml;
using soap = W3C.Soap;
using System.Runtime.Serialization;

using brick = IPRE.ScribblerBase.Proxy;
using motor = Microsoft.Robotics.Services.Motor.Proxy;


[assembly: ContractNamespace(IPRE.ScribblerMotor.Contract.Identifier, ClrNamespace = "IPRE.ScribblerMotor")]
namespace IPRE.ScribblerMotor
{
    
    [DisplayName("Scribbler Motor")]
    [Description("The Scribbler Motor Service")]
    [Contract(Contract.Identifier)]
    [AlternateContract(motor.Contract.Identifier)] //implementing the generic motor contract
    [PermissionSet(SecurityAction.PermitOnly, Name="Execution")]
    public class ScribblerMotor : DsspServiceBase
    {
        private motor.MotorState _state = null;

        [ServicePort("ScribblerMotor", AllowMultipleInstances = true)]
        private motor.MotorOperations _mainPort = new motor.MotorOperations();

        [Partner("ScribblerBase", Contract = brick.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate, Optional = false)]
        private brick.ScribblerOperations _scribblerPort = new brick.ScribblerOperations();


        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ScribblerMotor(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
			CreateSuccess();
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            if (_state == null)
            {
                _state = new motor.MotorState();
                _state.Name = "LeftMotor";       
                //NOTE: name must contain either 'left' or 'right'
                //default name is 'left' for use in Tutorial 2
                //name should really be loaded by manifest
            }

            // Listen on the main port for requests and call the appropriate handler.
            ActivateDsspOperationHandlers();

            // Publish the service to the local Node Directory
            DirectoryInsert();

			// display HTTP service Uri
			LogInfo(LogGroups.Console, "Service uri: ");
        }

        private int RequestPending = 0;

        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> SetMotorPowerHandler(motor.SetMotorPower setMotorPower)
        {
            // Requests come too fast, so dump ones that come in too fast.
            if (RequestPending > 0)
            {
                setMotorPower.ResponsePort.Post(new DefaultUpdateResponseType());
                yield break;
            }

            //flip direction if necessary
            double revPow = setMotorPower.Body.TargetPower;
            if (_state.ReversePolarity)
                revPow *= -1.0;

            //update state
            _state.CurrentPower = revPow;

            //convert to native units
            revPow *= 100;
            revPow += 100;
            int power = (int)Math.Round(revPow);

            //send hardware specific motor data
            brick.SetMotorBody motordata = new brick.SetMotorBody();
            motordata.Motor = _state.Name;
            motordata.Speed = power;

            RequestPending++;

            Activate(Arbiter.Choice(_scribblerPort.SetMotor(motordata),
                 delegate(DefaultUpdateResponseType status)
                 {
                     setMotorPower.ResponsePort.Post(DefaultUpdateResponseType.Instance);
                     RequestPending--;
                 },
                 delegate(soap.Fault failure)
                 {
                     setMotorPower.ResponsePort.Post(failure);
                     RequestPending--;
                 }
            ));

            yield break;
        }


        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(motor.Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }


        /// <summary>
        /// Replace Handler
        /// </summary>
        /// <param name="replace"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> ReplaceHandler(motor.Replace replace)
        {
            _state = replace.Body;
            replace.ResponsePort.Post(DefaultReplaceResponseType.Instance);
            yield break;
        }
    }

    public static class Contract
    {
        public const string Identifier = "http://www.roboteducation.org/scribblermotor.html";
    }
}
