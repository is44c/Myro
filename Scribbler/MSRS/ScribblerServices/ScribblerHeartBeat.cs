//------------------------------------------------------------------------------
// Scribbler Heart Beat Service
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Security.Permissions;
using xml = System.Xml;
using soap = W3C.Soap;
using System.Runtime.Serialization;

using brick = IPRE.ScribblerBase.Proxy;
using W3C.Soap;


namespace IPRE.ScribblerHeartBeat
{

    [DisplayName("Scribbler Heart Beat")]
    [Description("The Scribbler Heart Beat Service")]
    [Contract(Contract.Identifier)]
    [PermissionSet(SecurityAction.PermitOnly, Name="Execution")]
    public class ScribblerHeartBeat : DsspServiceBase
    {

        private ScribblerHeartBeatState _state = null;

        [ServicePort("/ScribblerHeartBeat", AllowMultipleInstances = false)]
        private ScribblerHeartBeatOperations _mainPort = new ScribblerHeartBeatOperations();

        [Partner("ScribblerBase", Contract = brick.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate, Optional = false)]
        private brick.ScribblerOperations _scribblerPort = new brick.ScribblerOperations();

        private Port<DateTime> _timerPort = new Port<DateTime>();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ScribblerHeartBeat(DsspServiceCreationPort creationPort) :  base(creationPort)
        {
			CreateSuccess();
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            if (_state == null)
            {
                _state = new ScribblerHeartBeatState();
                _state.Connected = false;
                _state.whichLED = 0; //left LED
                _state.LEDState = false;
                _state.PauseTime = 500; //half second
            }

            // Listen on the main port for requests and call the appropriate handler.
            ActivateDsspOperationHandlers();

            // Publish the service to the local Node Directory
            DirectoryInsert();

			// display HTTP service Uri
			LogInfo(LogGroups.Console, "Service uri: ");

            _timerPort.Post(DateTime.Now);
            Activate(Arbiter.Receive(true, _timerPort, TimerHandler));
        }


        void TimerHandler(DateTime signal)
        {
            brick.SetLedBody heartBeat = new brick.SetLedBody();
            heartBeat.LED = _state.whichLED;
            
            _state.LEDState = !_state.LEDState; //flip LED

            heartBeat.State = _state.LEDState;

            Activate(Arbiter.Choice(_scribblerPort.SetLED(heartBeat),
                delegate(DefaultUpdateResponseType status)
                {
                    _state.Connected = true;
                },
                delegate(Fault failure)
                {
                    _state.Connected = false;
                    LogError(failure);
                }
            ));

            //re-call ourselves
            Activate(
                Arbiter.Receive(false, TimeoutPort(_state.PauseTime),
                    delegate(DateTime time)
                    {
                        _timerPort.Post(time);
                    }
                )
            );
        }


        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }


        /// <summary>
        /// Replace Handler
        /// </summary>
        /// <param name="replace"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> ReplaceHandler(Replace replace)
        {
            _state = replace.Body;
            replace.ResponsePort.Post(DefaultReplaceResponseType.Instance);
            yield break;
        }
    }


}
