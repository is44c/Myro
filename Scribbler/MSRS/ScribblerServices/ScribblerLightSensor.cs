//------------------------------------------------------------------------------
// Scribbler Light Sensor Service
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Security.Permissions;
using xml = System.Xml;
using soap = W3C.Soap;
using System.Runtime.Serialization;
using submgr = Microsoft.Dss.Services.SubscriptionManager;

using brick = IPRE.ScribblerBase.Proxy;
using analog = Microsoft.Robotics.Services.AnalogSensor.Proxy;


namespace IPRE.ScribblerLightSensor
{
    
    [DisplayName("Scribbler Light Sensors")]
    [Description("The Scribbler Light Sensor Service")]
    [Contract(Contract.Identifier)]
    [PermissionSet(SecurityAction.PermitOnly, Name="Execution")]
    public class ScribblerLightSensor : DsspServiceBase
    {
        private ScribblerLightSensorState _state = null;

        [ServicePort("ScribblerLightSensor", AllowMultipleInstances = false)]
        private ScribblerLightSensorOperations _mainPort = new ScribblerLightSensorOperations();

        [Partner("ScribblerBase", Contract = brick.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate, Optional = false)]
        private brick.ScribblerOperations _scribblerPort = new brick.ScribblerOperations();

        [Partner("SubMgr", Contract = submgr.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.CreateAlways, Optional = false)]
        private submgr.SubscriptionManagerPort _subMgrPort = new submgr.SubscriptionManagerPort();

        private bool _subscribed = false;

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public ScribblerLightSensor(DsspServiceCreationPort creationPort)
            : base(creationPort)
        {
			CreateSuccess();
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            //configure default state
            if (_state == null)
            {
                _state = new ScribblerLightSensorState();

                _state.LeftSensor = new analog.AnalogSensorState();
                _state.LeftSensor.Identifier = 0;
                _state.LeftSensor.RawMeasurementRange = 65535;

                _state.CenterSensor = new analog.AnalogSensorState();
                _state.CenterSensor.Identifier = 1;
                _state.CenterSensor.RawMeasurementRange = 65535;

                _state.RightSensor = new analog.AnalogSensorState();
                _state.RightSensor.Identifier = 2;
                _state.RightSensor.RawMeasurementRange = 65535;
            }

            // Listen on the main port for requests and call the appropriate handler.
            ActivateDsspOperationHandlers();

            // Publish the service to the local Node Directory
            DirectoryInsert();

			// display HTTP service Uri
			LogInfo(LogGroups.Console, "Service uri: ");

            SubscribeToScribblerBase();
        }


        /// <summary>
        /// Subscribe to appropriate sensors on Scribbler base
        /// </summary>
        private void SubscribeToScribblerBase()
        {
            // Create a notification port
            brick.ScribblerOperations _notificationPort = new brick.ScribblerOperations();

            //create a custom subscription request
            brick.MySubscribeRequestType request = new brick.MySubscribeRequestType();

            //select only the sensor and port we want
            //NOTE: this name must match the scribbler sensor name.
            request.Sensors = new List<string>();

            request.Sensors.Add("LightLeft");
            request.Sensors.Add("LightCenter");
            request.Sensors.Add("LightRight");

            //Subscribe to the ScribblerBase and wait for a response
            Activate(
                Arbiter.Choice(_scribblerPort.SelectiveSubscribe(request, _notificationPort),
                    delegate(SubscribeResponseType Rsp)
                    {
                        //update our state with subscription status
                        _subscribed = true;

                        LogInfo("Scribbler Light Sensor subscription success");

                        //Subscription was successful, start listening for sensor change notifications
                        Activate(
                            Arbiter.Receive<brick.Replace>(true, _notificationPort, SensorNotificationHandler)
                        );
                    },
                    delegate(soap.Fault F)
                    {
                        LogError("Scribbler Light Sensor subscription failed");
                    }
                )
            );
        }

        /// <summary>
        /// Handle sensor update message from Scribbler
        /// </summary>
        public void SensorNotificationHandler(brick.Replace notify)
        {
            _state.LeftSensor.RawMeasurement = notify.Body.LightLeft;
            _state.CenterSensor.RawMeasurement = notify.Body.LightCenter;
            _state.RightSensor.RawMeasurement = notify.Body.LightRight;

            _state.LeftSensor.TimeStamp = DateTime.Now;
            _state.CenterSensor.TimeStamp = DateTime.Now;
            _state.RightSensor.TimeStamp = DateTime.Now;

            _state.LeftSensor.NormalizedMeasurement = (double)_state.LeftSensor.RawMeasurement / (double)_state.LeftSensor.RawMeasurementRange;
            _state.CenterSensor.NormalizedMeasurement = (double)_state.CenterSensor.RawMeasurement / (double)_state.CenterSensor.RawMeasurementRange;
            _state.RightSensor.NormalizedMeasurement = (double)_state.RightSensor.RawMeasurement / (double)_state.RightSensor.RawMeasurementRange;

            bool changed = true;

            if (changed)
            {
                //notify subscribers on any bumper pressed or unpressed
                _subMgrPort.Post(new submgr.Submit(_state, DsspActions.UpdateRequest));
            }

        }
        
        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }


        /// <summary>
        /// Replace Handler
        /// </summary>
        /// <param name="replace"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> ReplaceHandler(Replace replace)
        {
            _state = replace.Body;
            replace.ResponsePort.Post(DefaultReplaceResponseType.Instance);
            yield break;
        }


        /// <summary>
        /// Subscribe Handler
        /// </summary>
        /// <param name="subscribe"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public IEnumerator<ITask> SubscribeHandler(Subscribe subscribe)
        {
            yield return Arbiter.Choice(
                SubscribeHelper(_subMgrPort, subscribe.Body, subscribe.ResponsePort),
                delegate(SuccessResult success)
                {
                    _subMgrPort.Post(new submgr.Submit(
                        subscribe.Body.Subscriber, DsspActions.ReplaceRequest, _state, null));
                },
                null
            );
        }


    }


}
